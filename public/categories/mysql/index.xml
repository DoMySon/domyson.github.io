<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on 满船清梦压星河</title>
    <link>https://domyson.github.io/categories/mysql/</link>
    <description>Recent content in Mysql on 满船清梦压星河</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 28 Mar 2024 03:25:35 +0000</lastBuildDate>
    <atom:link href="https://domyson.github.io/categories/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>mvcc</title>
      <link>https://domyson.github.io/post/db/mysql/mvcc/</link>
      <pubDate>Sun, 20 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/db/mysql/mvcc/</guid>
      <description>MVCC multi-version concurent control 多版本控制系统，一般用于数据库的并发访问&#xA;MVCC在MySQL InnoDB中的实现主要是为了提高数据库的并发性能，用更好的方式去处理读-写冲突，做到即使有读写冲突时，也能做到不加锁，非阻塞并发读。&#xA;mysql 的 RR级别是通过MVCC多版本并发控制的实现的，它通过管理数据行的多个版本来实现数据库并发控制，通过比较版本号来决定数据是否显示&#xA;mvcc在很多情况下避免加锁，大多数都实现了非阻塞读操作，写操作也是锁定必要行，innodb在每行记录后面保存两个隐藏列，分别是创建版本号和删除版本号,每开始一个新的事务系统版本号都会递增，事务开始的时刻的系统版本号 会作为事务的版本号，用以和查询到的每行记录的版本号进行比较，在RR级别下的工作方式：&#xA;select 需要同时满足查版本号早于当前版本的数据行，行的删除版本要么未定义，要么大于当前数据版本号&#xA;insert 为插入的每一行记录保存当前系统版本作为创建版本号&#xA;delete&#xA;update&#xA;当前读 像 select lock in share mode,select for update ,update,insert,delete 都算当前读，即读取的记录都是数据库中最新的版本，读取是还要保证其他并发事务不能修改当前记录，所以会对读数据加锁&#xA;快照读 不加锁的select就是快照读，但前提是隔离基本不是串行级别，否则会退化成当前读&#xA;原理 通过隐藏列</description>
    </item>
    <item>
      <title>mysql batch update</title>
      <link>https://domyson.github.io/post/db/mysql/%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/db/mysql/%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;最近开发公会功能，需要定时保存一些，如果每次都是以公会为单位的话，相当于n个公会执行了n次&lt;code&gt;UPDATE&lt;/code&gt;操作&lt;/p&gt;&#xA;&lt;h1 id=&#34;实现&#34;&gt;实现&lt;/h1&gt;&#xA;&lt;h2 id=&#34;简单粗暴update&#34;&gt;简单粗暴&lt;code&gt;UPDATE&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mytable&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;field1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;field2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WHRER&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CONDITION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>mysql100问</title>
      <link>https://domyson.github.io/post/db/mysql/mysql100%E9%97%AE/</link>
      <pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/db/mysql/mysql100%E9%97%AE/</guid>
      <description>聚集、非聚集、联合索引 A1: 聚集索引（主键索引）所有ROW都会按照主键索引进行排序&#xA;A2: 非聚集索引即普通索引加上字段&#xA;A3: 几个字段组成的索引&#xA;A4: 聚集索引在物理上连续，非聚集索引在物理上不连续，但在逻辑上连续&#xA;A5: 聚集索引影响物理存储顺序，而非聚集索引不影响&#xA;A6: 聚集索引插入慢，查询快，非聚集索引反之&#xA;A7: 索引是通过二叉树来描述的，聚集索引的子叶节点也是数据节点，而非聚集索引子叶节点仍是索引节点&#xA;自增主键有哪些问题 A1: 分表分库的时候可能会出现重复情况（可使用uuid替代） A2: 产生表锁 A3: id耗尽 索引无效的情况 A1: 以%开头的LIKE语句，模糊匹配 A2: OR 前后字段未同时使用索引 A3: 数据类型隐式转换（varchar-&amp;gt;int) 查询优化 A1: 在WHERE和ORDER BY所涉及的列上加上索引 A2: SELECT避免使用*,SQL语句全部大写 A3: 避免WHERE对索引列上进行IS NULL判断，替换成IS NOT NULL A4: IN和NOT IN会导致全表扫描,替换为EXISTS或NOT EXISTS A5: 避免在索引上进行计算 A6: WHRER使用OR会放弃索引进而全表扫描 CHAR和VARCHAR的区别 A1: 存储和检索方式不同 A2: CHAR长度在创建时候指定(1~255),在存储时尾部全部填充空格 主键索引和唯一索引的区别 A1: 主键是一种约束 A2: 主键一定包含一个唯一索引，反之不成立 A3: 主键索引不允许包含空值，而唯一索引可以 A4: 一张表只能有一个主键索引，而唯一索引可以有多个 CPU飙升问题排查 A1: top命令观察mysqld A2: 若是，则show processlist查看是否是 SQL 的问题， A3: 若是，则检查执行计划是否准确，是否索引确实，数据是否太大 A4: kill上述线程，加索引，改内存，改SQL并重跑 A5: 若不是，可能是短时间有大量连接，可以限制最大连接数 如何创建索引 A1:</description>
    </item>
  </channel>
</rss>
