<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on 满船清梦压星河</title>
    <link>https://domyson.github.io/categories/c/</link>
    <description>Recent content in C on 满船清梦压星河</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 07 Oct 2023 21:54:38 +0800</lastBuildDate>
    <atom:link href="https://domyson.github.io/categories/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>预处理器</title>
      <link>https://domyson.github.io/post/language/c/preprocessor/</link>
      <pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/c/preprocessor/</guid>
      <description>预处理器 #pragma 用于指示编译器完成一些特定的动作&#xA;#pragma message usermessage&#xA;//example:test.c #include &amp;lt;stdio.h&amp;gt; #define IOS #if defined IOS #pragma message &amp;#34;ready complie ios...&amp;#34; #endif //complie output: note: #pragma message: ready complie ios... #pragma once 确保头文件仅被编译一次&#xA;//example:test.h #pragma once int value = 10; //example:test.c #include &amp;#34;test.h&amp;#34; #include &amp;#34;test.h&amp;#34; #pragma pack(size_t) 指定内存对齐&#xA;//example:test.c // 2byte 对齐 #pragma pack(2) struct foo{ char c1; char c2: short 2; int i; }; // 4byte 对齐 #pragma pack(4) struct bar{ char c1; shirt s; char c2; int i; }; void main(){ printf(&amp;#34;%d\n&amp;#34;,sizeof(struct foo)); //8 printf(&amp;#34;%d\n&amp;#34;,sizeof(struct bar)); //12 } 在不同编译器之间不可移植，在不同编译器可能以不同的方式解释，预处理器将忽略不被识别的此指令</description>
    </item>
    <item>
      <title>pointer</title>
      <link>https://domyson.github.io/post/language/c/pointer/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/c/pointer/</guid>
      <description>Pointer 定义一个指针 type *name;，但 type* name; 也无错误，仅仅是风格问题&#xA;使用指针 { int var = 20; int *p; //声明int类型指针 ip = &amp;amp;var; //获取var的地址 } 引用 引用不同于指针，引用必须被赋值，并且引用不能被修改，它指向了数据本身，主要是为了函数传入参数过大发生大量拷贝（函数传递总是值传递）&#xA;NULL 指针 #include &amp;lt;stdio.h&amp;gt; int main(){ int *ptr = NULL; printf(&amp;#34;ptr addr %p\n&amp;#34;,ptr); if(ptr){ // ptr is NULL? } return 0; } //将输出 ptr addr 0x0 指针运算 指针在32位cpu上是一个32位的int，而64上是一个64的int，每递增一次或递减一次将指向下一个或上一个元素的存储单元&#xA;#include &amp;lt;stdio.h&amp;gt; int main(){ int var[] = {10,100,200}; int i,*ptr; ptr = var; //指向数组第一个元素 for(i=0;i&amp;lt;3;i++){ printf(&amp;#34;val %d\n&amp;#34;,*ptr); ptr++; //移动至下一个数组的位置，如果这个数组的元素不都为int的长度，那么数值未知 } } 指针数组 #include &amp;lt;stdio.</description>
    </item>
  </channel>
</rss>
