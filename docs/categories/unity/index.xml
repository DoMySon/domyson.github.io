<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>unity on 满船清梦压星河</title>
    <link>http://localhost:1313/categories/unity/</link>
    <description>Recent content in unity on 满船清梦压星河</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 10 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/unity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>性能优化</title>
      <link>http://localhost:1313/post/unity/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/unity/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      <description>音频 短音频使用Wav，长音频使用mp3 纹理 Mipmap mipmap用于减少渲染的带宽压力，但会有额外的内存开销，一般而言UI是建议关闭的，3D模型看情况开启
Read/Write 纹理尺寸 不同大小的纹理尺寸对内存的占用也是不同，依照项目的实际情况来决定Size
格式 由于ETC、PVRTC等格式均为有损压缩，因此，当纹理色差范围跨度较大时，均不可避免地造成不同程度的“阶梯”状的色阶问题。因此，很多研发团队使用RGBA32/ARGB32格式来实现更好的效果。但是，这种做法将造成很大的内存占用
ETC1 不支持透明通道问题 可以通过 RGB24 + Alpha8 + Shader 的方式达到比较好的效果
ECT2，ASTC 但需要设备支持 OpenGL ES3.0
LOD unity内置的一项技术，主要是根据目标离相机的距离来断定使用何种精度的模型，减少顶点数的绘制，但代价就是要牺牲部分内存
Occlusion culling 遮挡剔除 遮挡剔除是用来消除躲在其他物件后面看不到的物件，这代表资源不会浪费在计算那些看不到的顶点上，进而提升性能
batching dynamic batching 将一些足够小的网格，在CPU上转换它们的顶点，将许多相似的顶点组合在一起，并一次性绘制它们。 无论静态还是动态合批都要求使用相同的材质，动态合批有以下限制：
+ 如果GameObjects在Transform上包含镜像，则不会对其进行动态合批处理+ 使用多个pass的shader不会被动态合批处理+ 使用不同的Material实例会导致GameObjects不能一起批处理，即使它们基本相同。+ [官方25个不能动批的情况](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FUnity-Technologies%2FBatchBreakingCause)static batching 静态合批是将静态（不移动）GameObjects组合成大网格，然后进行绘制。静态合批使用比较简单，PlayerSettings中开启static batching，然后对需要静态合批物体的Static打钩即可，unity会自动合并被标记为static的对象，前提它们共享相同的材质，并且不移动，被标记为static的物体不能在游戏中移动，旋转或缩放。但是静态批处理需要额外的内存来存储合并的几何体。注意如果多个GameObject在静态批处理之前共享相同的几何体，则会在编辑器或运行时为每个GameObject创建几何体的副本，这会增大内存的开销
GPU Instancing 使用GPU Instancing可以一次渲染(render)相同网格的多个副本，仅使用少量DrawCalls。在渲染诸如建筑、树木、草等在场景中重复出现的事物时，GPU Instancing很有用。
每次draw call，GPU Instancing只渲染相同(identical )的网格，但是每个实例(instance)可以有不同的参数(例如，color或scale)，以增加变化(variation)，减少重复的出现。
GPU Instancing可以减少每个场景draw calls次数。这显著提升了渲染性能。
Physics Auto Simulation 根据项目实际需要是否开启物理模拟，默认是是开启的
Fixed Timestep 过小的值会操成计算量过大，过大的值可能造成部分机制异常(如卡墙，穿透等)，根据项目实际来确定
Maximum Allowed Timestep 这里我们需要先知道物理系统本身的特性，即当游戏上一帧卡顿时，Unity会在当前帧非常靠前的阶段连续调用N次FixedUpdate.PhysicsFixedUpdate，Maximum Allowed Timestep的意义就在于单帧限制物理更新的次数，</description>
    </item>
    
    <item>
      <title>assetbundle</title>
      <link>http://localhost:1313/post/unity/assetbundle/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/unity/assetbundle/</guid>
      <description>Assetbundle 一种包外资源的存储方案，方便更新以及加载
Manifest 每一个文件夹下都会有一个 Manifest文件，其作用是包含了其下资源的引用关系
AB管理 资源分类 一般而言我们会根据语言版本进行分类，（如一些有图片文字的资源），然后根据资源的通用性区分是否是共享资源，以减少AB资源冗余，二是根据模块业务来细分。
资源加载 首先应当加载Manifest文件读取相关依赖，常用的做法是加载到内存由用户自己控制，因为原始的结构是树状结构，当层次比较深的时候会造成搜索时间过长，转为字典的方式确保索引时间为O(1)
依赖相关的问题，如A依赖于C，A被第一次被加载时，是需要先检查是否C是否被加载。
资源卸载 资源卸载一般都为引用计数的方式，但某些情况下可能会出现刚卸载完就需要被再次使用的场景，这个时候做一个对象池维护一定量的内存资源是合理的方式
其次是资源依赖，如A引用了C，B引用了C，若此时A，B被卸载的时候，C的引用数为0，那么这个时候是否应该卸载C呢？，答案是否定的，也许会存在 D，E,F 同样依赖于C，这个时候最好的做法是将这个资源放入池中，开启循环技术，当到达某个阈值时再释放.
public class ABAsset{ public int Ref; public int tick; } public class ABManagment{ // per frame or interval call. public void GC(){ for (){ ... if (ab.Ref == 0){ ab.tick --; if(ab.tick &amp;lt;= 0){ // release. } } } } } 存在的问题
上述方案从程序的角度上看来是没有逻辑问题的，但如果程序员忘记释放了如何解决这个问题，笔者这里分为两种，
一种非Monobehaviour的类，可以通过析构函数。
构建一个公共抽象，由父类实现。
资源分包 常常见到的问题是一般资源分多大合适，官方给出的建议是3~5MB,但现实情况是分不了这么细怎么办，比如登陆场景的立绘。为了达到效果肯定是不会过大的压缩。这就引申出另外一个问题，过大的资源如何保证不卡顿。一般而言像这种大资源分两种情况
长期使用 笔者项目一般会做资源预热，像这类资源我们会在首次登陆切换场景的时候就直接加载，保证不会被回收。
仅使用一次 也会先预热，但之后就会立即卸载，以保证不会占用过多的内存资源
引用 运行时，AssetBundle驻留控制在40MB以内、数量在1000个以内； 使用LZ4压缩+LoadFromFile加载； 结合项目情况根据依赖树制定打包策略，如公共资源单独打AssetBundle、按使用场景和功能类型分包、独立资源打到一起、Shader/字体等（较为细碎、内存不高、高频使用、最好常驻的）资源打包到一起，启动游戏的时候常驻内存； 结合热更新需求打包； 依赖打包，追求0冗余； 粒度具体没有定值，近期经验上来看会需要尤其警惕AssetBundle包体超过10MB的。 </description>
    </item>
    
    <item>
      <title>组合AI</title>
      <link>http://localhost:1313/post/unity/ai/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/unity/ai/</guid>
      <description>什么是AI 一串由外部因素影响行为的实体？
内部条件分支构建的行为？
学习并采取对应策略的结果？（Alpa go）
AI设计思想 特别注意这是笔者自己的一套思维，而非网上流传的。其中会混入一些ECS的思想
何谓AI 我们人为给它制定约束行为条件，让其结果收敛于某个区间，比如我没给它赋予行走的行为（单元），那么它就不应该存在这种方面的意向倾斜，（它可能会提示需要这种行为，而不是自主产生这种行为），这也是和带学习能力AI的区别，它的计算结果不应该是发散的。
AI Unit AI单元是对某些行为具体抽象，它是数据（你也可以认为它是ECS中的C），比如行走（AI_WALK），它有一些数据
public class AI_Walk{ public float Speed; public Vector3 Direction; } 这个时候AI实体具备了一个行走的逻辑，朝哪走，走多快由这个单元确定，再比如说跑这个行为，它和走没任何区别，我们仅仅需在必要的时刻改变AI_Walk这个单元的属性值即可。因为它们有共同的数据结构。
AI Selector AI选择器用于对每个条件节点
AI Executor todo</description>
    </item>
    
    <item>
      <title>xLua</title>
      <link>http://localhost:1313/post/unity/xlua/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/unity/xlua/</guid>
      <description>XLua XLua下载
配置文档
FAQ
标签 [Hotfix] 开启 HOTFIX_ENABLE 宏
通过热补丁的方式修复代码 xlua.hotfix函数
[LuaCallCsharp] 一个C#类型加了这个配置，xLua会生成这个类型的适配代码（包括构造该类型实例，访问其成员属性、方法，静态属性、方法），否则将会尝试用性能较低的反射方式来访问。
一个类型的扩展方法（Extension Methods）加了这配置，也会生成适配代码并追加到被扩展类型的成员方法上。
xLua只会生成加了该配置的类型，不会自动生成其父类的适配代码 ，当访问子类对象的父类方法，如果该父类加了LuaCallCSharp配置，则执行父类的适配代码，否则会尝试用反射来访问。
反射访问除了性能不佳之外，在 il2cpp 下还有可能因为代码剪裁而导致无法访问，
xLua 属性标签 [LuaCallCsharp] 来指明哪些类需要生成代码。
[LuaCallCsharp] public class A{ } 也可以在一个静态列表中通过标签一起生成
[LuaCallCSharp] public static List&amp;lt;Type&amp;gt; generate = new List&amp;lt;Type&amp;gt;() { typeof(GameObject), typeof(Dictionary&amp;lt;string, int&amp;gt;), }; 动态列表
public static List&amp;lt;Type&amp;gt; dynamic { get{ return ( from type in Assembly.Load(&amp;#34;Assmebly-CSharp&amp;#34;).GetTypes() where type.NameSpace == &amp;#34;XYZ&amp;#34; select type).ToList(); } } [ReflectionUse] 一个C#类型类型加了这个配置，xLua会生成link.xml阻止il2cpp的代码剪裁。
对于扩展方法，必须加上LuaCallCSharp或者ReflectionUse才可以被访问到。
建议所有要在Lua访问的类型，要么加LuaCallCSharp，要么加上ReflectionUse，这才能够保证在各平台都能正常运行。
[CSharpCallLua] 如果希望把一个lua函数适配到一个C# delegate（一类是C#侧各种回调：UI事件，delegate参数，比如List:ForEach；另外一类场景是通过 LuaTable的Get函数 指明一个lua函数绑定到一个delegate）。或者把一个lua table适配到一个C# interface，该delegate或者interface需要加上该配置。</description>
    </item>
    
  </channel>
</rss>
