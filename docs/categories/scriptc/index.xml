<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scriptc on 满船清梦压星河</title>
    <link>https://domyson.github.io/categories/scriptc/</link>
    <description>Recent content in scriptc on 满船清梦压星河</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 04 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://domyson.github.io/categories/scriptc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Assembly Design</title>
      <link>https://domyson.github.io/post/scriptc/5/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/post/scriptc/5/</guid>
      <description>序 </description>
    </item>
    
    <item>
      <title>AST 抽象语法树</title>
      <link>https://domyson.github.io/post/scriptc/3/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/post/scriptc/3/</guid>
      <description>序 </description>
    </item>
    
    <item>
      <title>grammer</title>
      <link>https://domyson.github.io/post/scriptc/2/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/post/scriptc/2/</guid>
      <description>序 </description>
    </item>
    
    <item>
      <title>lex</title>
      <link>https://domyson.github.io/post/scriptc/1/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/post/scriptc/1/</guid>
      <description>序 对于一个源码文件而言，里面的内容只是一个个字符，机器是无法识别的，而词法分析器的作用类似于转义器，将一个个字符拆成若干个有特定意义的词，而这一过程称为词法分析，此时它也不能被机器(或者这个虚拟机)识别
词法分析器 Token,Keyword,界符，常数，运算符 token 以及 keyword是存在区别的，像token 可以是认为是一个此的描述，如:
const int sum = 100; typedef struct my_struct{ int a ; unsigned int b; char *c; }; 学过语言的都知道，什么是语言关键字。
typedef,struct,int,my_struct 等都可以认为是一个token,可以简单理解为一个词的代号，而keyword属于被包含关系，typedef,struct,int 它们属于keyword,因为它们是程序内部定义&amp;quot;词&amp;quot;，而my_struct则属于用于定义的，
像类似于 +,-,*,/ 等都属于运算符
其中 const int sum = 100; 中的100 则认为是一个常数.
基本设计 首先我们为一个词定义一些token,如 typedef enum Token { EOF = 0, COMMENT, IDENT, __KEYWORD_BEGIN IF, ELSE, SWITCH, CASE, RETURN, // etc... __KEYWORD_END, __MATH_BEGIN Add, // + Sub, // - Mul, // * Quo, // / Rem, // % And, // &amp;amp; Or, // | __MATH_END }; 可以属于到几个特殊的定义 __XXX_BEING,__XXX_END 这是为了方便后续快速区分这些&amp;quot;词&amp;quot;是属于那些种类</description>
    </item>
    
    <item>
      <title>Register</title>
      <link>https://domyson.github.io/post/scriptc/4/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/post/scriptc/4/</guid>
      <description>序 </description>
    </item>
    
    <item>
      <title>scriptc</title>
      <link>https://domyson.github.io/post/scriptc/0/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/post/scriptc/0/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这篇文章将会是一个系列，更新会比源码慢，文档写的也不会写的很完全，名字暂定 &lt;code&gt;scriptc&lt;/code&gt;, 语法是简化版的 &lt;code&gt;c&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;设计缘由&#34;&gt;设计缘由&lt;/h1&gt;
&lt;p&gt;早在2019之前就想开发一门脚本语言，一是加深编译原理的理解，二是觉得程序员不应该消耗在语言特性上，也一直想为自己的服务端框架 &lt;a href=&#34;https://domyson.github.io/post/skynet/skynet&#34;&gt;skynet-go&lt;/a&gt; 写一门dsl，现在是用lua作为服务的脚本端。&lt;/p&gt;
&lt;p&gt;尽管它的性能是脚本语言中顶尖的，但是一些隐式写法并不能保证它的预期性能，如混合&lt;code&gt;table&lt;/code&gt;,过多的函数调用栈，字符串操作以及无类型系统。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;类型系统有利有弊，但我个人的观点是宁愿多出30%的开发时间，而减少70%的bug。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;register-based-和-stack-based&#34;&gt;Register Based 和 Stack Based&lt;/h1&gt;
&lt;p&gt;如&lt;code&gt;python,ruby,js,java&lt;/code&gt; 属于 &lt;code&gt;Stack Based&lt;/code&gt;, 而&lt;code&gt;lua&lt;/code&gt;则属于&lt;code&gt;Register Based&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;有许多文章都解释了它们之间的区别，一句话概括&lt;code&gt;Register Based&lt;/code&gt; 拥有更好的性能,因为它节省了很多入栈和出栈的操作，相应的它的实现会比&lt;code&gt;Stack Based&lt;/code&gt;复杂很多，而且&lt;code&gt;Register Based&lt;/code&gt;的指令于真实的汇编也很相似，它们的优化手段也是非常多的。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
