<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 满船清梦压星河</title>
    <link>https://domyson.github.io/categories/go/</link>
    <description>Recent content in Go on 满船清梦压星河</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 28 Mar 2024 03:25:35 +0000</lastBuildDate>
    <atom:link href="https://domyson.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Memory</title>
      <link>https://domyson.github.io/post/language/go/memory/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/memory/</guid>
      <description>虚拟内存 虚拟内存屏蔽了RAM和Disk,向进程提供远大于物理内存的内存空间，简单来说就是使用了 memory map 分别映射了RAM和Disk的某个区域&#xA;堆栈 栈的方向向低地址增长，而堆恰好相反&#xA;Vritual memory address | kernel | |-------------------| 0xC00000000 | ---argv,evniron---| | -------stack -----| | ---------↓--------| | ----stack top-----| | | | unallocated | | | heap | | | uninitialized data| | initialized data | | program Code | | | 0x08048000 | | 0x00000000 Tcmalloc 也许同时google出品吧&#xA;Page&#xA;操作系统对内存管理以页为单位，Tcmalloc 也是如此，但其不一定相等，而是倍数关系(x64 Page 为8kb)&#xA;Span&#xA;一组连续的Page称为Span,是Tcmalloc的基本单位&#xA;ThreadCache&#xA;每个线程自身的Cache,包含多个空闲内存块链表，每个单独的链表大小是一致的，方便申请时不需要遍历全局，而且是无锁访问&#xA;CentarlCache&#xA;所有线程共享的空闲内存块，链表数量同 ThreadCache,当ThreadCache不够时会从其申请，但它是需要加锁&#xA;PageHeap&#xA;对堆内存的抽象，也是由若干链表组成，链表保存的是 Span，当 CentarlCache不足时，获取空闲Span然后拆分成若干内存块，并添加到对应大小的链表中以供分配，否则将会放回</description>
    </item>
    <item>
      <title>sync.pool</title>
      <link>https://domyson.github.io/post/language/go/sync.pool/</link>
      <pubDate>Fri, 15 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/sync.pool/</guid>
      <description>结构分析 type Pool struct { noCopy noCopy local unsafe.Pointer // P 本地池，固定尺寸，实际结构 [P]poolLocal，类似 void* 并附加长度构成了一个数组 localSize uintptr // size of the local array victim unsafe.Pointer // local from previous cycle victimSize uintptr // size of victims array New func() any } type poolChain struct{ head *poolChainElt tail *poolChainElt } type poolChainElt struct{ // 一个双向链表 poolDequeue next,prev *poolChainElt } type poolDequeue struct{ headtail uint64 vals []eface } type eface struct{ // 数据的真实内存分配，包括一个类型描述和实际数据 typ,val unsafe.</description>
    </item>
    <item>
      <title>sync.Map</title>
      <link>https://domyson.github.io/post/language/go/sync.map/</link>
      <pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/sync.map/</guid>
      <description>&lt;h1 id=&#34;syncmap-自带的安全-map&#34;&gt;&lt;code&gt;sync.Map&lt;/code&gt; 自带的安全 &lt;code&gt;map&lt;/code&gt;&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;源码位于 &lt;code&gt;${GOPATH}/src/sync/map.go&lt;/code&gt;，值得注意的是&lt;code&gt;sync.Map&lt;/code&gt;是&lt;code&gt;lazy load&lt;/code&gt;,不需要初始化&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Cgo</title>
      <link>https://domyson.github.io/post/language/go/cgo/</link>
      <pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/cgo/</guid>
      <description>cgo 一种go与c交互的技术 开启cgo 要求系统安装C/C++工具链，macos和linux(gcc 自带)，windows(mingw),并确保环境变量CGO_ENAVBLE=on,最后单个源码需要导入 import &amp;quot;C&amp;quot;&#xA;cgo类型映射 C type Cgo type Go type char C.char byte signed char C.schar int8 unsigned char C.uchar uint8 short C.short int16 unsigned short C.ushort uint16 int C.int int32 unsigned int C.uint uint32 long C.long int32 unsigned long C.ulong uint32 long long int C.longlong int64 unsigned long long int C.ulonglong uint64 float C.float float32 double C.double double size_t C.size_t uint 函数指针 go引用c的函数指针比较特别&#xA;官方给出的Example&#xA;我这里给出另外一种,通过c wrap 这个函数指针成一个普通函数，然后go调用它</description>
    </item>
    <item>
      <title>Go GC分析</title>
      <link>https://domyson.github.io/post/language/go/gc/</link>
      <pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/gc/</guid>
      <description>如何启用GC跟踪 GODEBUG=gctrace=1 go run *.go&#xA;其中 gctrace=1 表示只针对这个进程进行GC追踪&#xA;标记流程 go采用三色标记法，主要是为了提高并发度，这样扫描过程可以拆分为多个阶段，而不用一次扫描全部&#xA;黑 根节点扫描完毕，子节点也扫描完毕&#xA;灰 根节点扫描完毕，子节点未扫描&#xA;白 未扫描&#xA;扫描是从 .bss .data goroutine栈开始扫描，最终遍历整个堆上的对象树&#xA;标记 mark 标记过程是一个广度优先的遍历过程，扫描节点，将节点的子节点推送到任务队列中，然后递归扫描子叶节点，直到所有工作队列被排空&#xA;mark阶段会将白色对象标记，并推入队列中变为灰色&#xA;memory barrier 保障了代码描述中对内存的操作顺序，即不会在编译期被编译器进行调整，也不会在运行时被CPU的乱序执行所打乱&#xA;write barrier 在应用进入 GC 标记阶段前的 stw 阶段，会将全局变量 runtime.writeBarrier.enabled 修改为 true，这时所有的堆上指针修改操作在修改之前便会额外调用 runtime.gcWriteBarrier&#xA;由于GC和Go主程序并发执行，所以必须要在扫描时监控内存可能出现的状态改变，所以需要写屏障，所以需要暂停GO主程序（STW）&#xA;hybrid wirte barrier (after go1.8) 改方式的基本思想是：对正在被覆盖的对象进行着色，且如果当时栈未扫描完成，则同样对指针进行着色&#xA;GC流程 程序启动会为每个P分配一个 mark worker 来标记内存，负责为进入STW做前期工作&#xA;起初认为所有 object 都被认定为白色 但栈，堆和全局变量的object被标记为灰色 GC会将灰色object标记为黑色，将灰色object所包含的所有指针所指向的地址都标记为灰色，递归这两个步骤，最终对象非黑即白，其中白色object即未被引用且可以被回收，如果object标记为no scan，则递归结束，标记为黑色&#xA;todo https://blog.csdn.net/asd1126163471/article/details/124113816</description>
    </item>
    <item>
      <title>unsafe包</title>
      <link>https://domyson.github.io/post/language/go/unsafe/</link>
      <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/unsafe/</guid>
      <description>Golang 默认指针是类型安全的，但它有很多限制。Golang 还有非类型安全的指针，这就是 unsafe 包提供的 unsafe.Pointer。在某些情况下，它会使代码更高效，当然，也更危险。unsafe 包用于 Go 编译器，在编译阶段使用。从名字就可以看出来，它是不安全的，官方并不建议使用。Go 语言类型系统是为了安全和效率设计的，有时，安全会导致效率低下。unsafe 包绕过了 Go 的类型系统，达到直接操作内存的目的，使用它有一定的风险性。但是在某些场景下，使用 unsafe 包提供的函数会提升代码的效率，Go 源码中也是大量使用 unsafe 包。&#xA;unsafe 包 //定义 type ArbitraryType int type Pointer *ArbitraryType //函数 func Sizeof(x AribitraryType) uintptr{} func Offsetof(x AribitraryType) uintptr{} func Alignof(x AribitraryType) uintptr{} 分析 Pointer : 指向任意类型，类似于 C 中的 void*。&#xA;Sizeof : 返回所传类型的大小，指针只返回指针的本身（x64 8byte x86 4byte），而不会返回所指向的内存大小。&#xA;Offsetof : 返回 struct 成员在内存中的位置，相对于此结构体的头位置，所传参数必须是结构体成员。传入指针，或者结构体本身，会 error&#xA;Alignof : 返回 M，M 是内存对齐时的倍数。&#xA;任意指针都可以和 unsafe.Pointer 相互转换。&#xA;uintptr 可以和 unsafe.</description>
    </item>
    <item>
      <title>Go 编译指示</title>
      <link>https://domyson.github.io/post/language/go/pragma/</link>
      <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/pragma/</guid>
      <description>编译指示 在计算机编程中，编译指示(pragma) 是一种语言结构，它指示编译器应该如何处理其输入。指示不是编程语言语法的一部分，因编译器而异。&#xA;Go中的编译指示 //go:pragma func Echo(){} 指示详解 //go:noinline 使函数不内联，内联是在编译期间发生的，将函数调用处替换为被调用函数主体的一种编译器优化手段。&#xA;减少函数调用的开销，提高执行速度。&#xA;复制后的更大函数体为其他编译优化带来可能性，如 过程间优化&#xA;消除分支，并改善空间局部性和指令顺序性，同样可以提高性能。&#xA;代码复制带来的空间增长。&#xA;如果有大量重复代码，反而会降低缓存命中率，尤其对 CPU 缓存是致命的。&#xA;内联 func Max(a, b int) int { if a &amp;gt; b { return a } return b } func F() { const a, b = 100, 20 if Max(a, b) == b { panic(b) } } // `Max` 函数被内联，死码消除之后，`F()` 函数被变成了 `F(){ return }` 内联级别：默认常规内联，-gcflags=-l 禁用内联，-gcflags=&#39;-l -l&#39; 二级内联，-gcflags=&#39;-l -l -l&#39; 三级内联，-gcflags=&#39;-l -l -l -l&#39; 四级内联，级数越大，也许更快，但bug更多</description>
    </item>
    <item>
      <title>Go标准命令</title>
      <link>https://domyson.github.io/post/language/go/cmd/</link>
      <pubDate>Tue, 28 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/cmd/</guid>
      <description>&lt;p&gt;Go源码文件包括：命令源码文件、库源码文件和测试源码文件。其中，命令源码文件总应该属于main代码包，且在其中有无参数声明、无结果声明的main函数。单个命令源码文件可以被单独编译，也可以被单独安装&lt;/p&gt;</description>
    </item>
    <item>
      <title>channel</title>
      <link>https://domyson.github.io/post/language/go/channel/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/channel/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;CSP(communicating sequential processes)&lt;/code&gt; 模型由并发执行实体(进程，线程或协程)，和消息通道组成，实体之间通过消息通道发送消息进行通信。和 &lt;code&gt;Actor&lt;/code&gt; 模型不同，&lt;code&gt;CSP&lt;/code&gt; 模型关注的是消息发送的载体，即通道，而不是发送消息的执行实体。Go 语言的并发模型参考了 CSP 理论，其中执行实体对应的是 &lt;code&gt;goroutine，&lt;/code&gt; 消息通道对应的就是 &lt;code&gt;channel&lt;/code&gt;。&lt;code&gt;CSP&lt;/code&gt; 模型的核心是：不通过共享内存来达到通讯，而是通过通讯来共享内存。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;channel&lt;/code&gt; 提供了一种通信机制，通过它，一个 &lt;code&gt;goroutine&lt;/code&gt; 可以与另一 &lt;code&gt;goroutine&lt;/code&gt; 发送消息。&lt;code&gt;channel&lt;/code&gt; 本身还需关联了一个类型，也就是可以发送数据的类型。可以通过 &lt;code&gt;len()&lt;/code&gt; 获取通道当前缓冲数量。 &lt;code&gt;cap()&lt;/code&gt; 获取通道最大缓冲。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Go Module</title>
      <link>https://domyson.github.io/post/language/go/mod/</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/mod/</guid>
      <description>Module Golang 从1.11版本开始支持官方自带的依赖管理模块。根据项目路径中的 go.mod 文件来建立依赖管理。&#xA;依赖添加 通过 import 自动添加到 go.mod 文件中&#xA;import &amp;#34;github.com/xxx/yyy&amp;#34; 编辑 go.mod 文件&#xA;module xxx go 1.13.4 require( xxxx v0.0.0 yyyy v1.1.1 ) 依赖升级 通过 go 命令&#xA;#查看gin的所有版本 go list -m -versions github.com/gin-gonic/gin #输出所有gin的版本 github.com/gin-gonic/gin v1.1.1 v1.1.2 v1.1.3 v1.1.4 v1.3.0 v1.4.0 v1.5.0 #下载所需依赖 go mod tidy 直接编辑 go.mod 文件&#xA;删除未使用依赖项 go mod tidy&#xA;使用本地包 /* go.mod文件 replace boost-go v0.0.1 =&amp;gt; ../boost-go */ </description>
    </item>
    <item>
      <title>Locker</title>
      <link>https://domyson.github.io/post/language/go/lock/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/lock/</guid>
      <description>sync.Mutex mutex相关的所有事情都是通过sync.Mutex类型的两个方法sync.Lock()和sync.Unlock()函数来完成的，前者用于获取sync.Mutex锁，后者用于释放sync.Mutex锁。sync.Mutex一旦被锁住，其它的Lock()操作就无法再获取它的锁，只有通过Unlock()释放锁之后才能通过Lock()继续获取锁。&#xA;不区分读写锁，只有Lock()与Lock()之间才会导致阻塞的情况&#xA;不与 Goroutine 关联&#xA;在Lock()和Unlock()之间的代码段称为资源的临界区(critical section)，在这一区间内的代码是严格被Lock()保护的，是线程安全的，任何一个时间点都只能有一个goroutine执行这段区间的代码。由于内核调度的不确定性，所以谁获取锁也是不确定的&#xA;sync.RWMutex RWMutex 基于 Mutex,并增加了读、写信号量，增加了获取读锁的计数&#xA;读锁和读锁兼容，写锁和读锁互斥，写锁和写锁互斥&#xA;可以同时申请多个读锁&#xA;读锁存在，则写锁阻塞，反之亦然&#xA;写锁存在，写锁和读锁都阻塞，同一时间仅一个能写&#xA;不与 Goroutine 关联&#xA;源码 //RwMutex source code type RWMutex struct{ w Mutex writerSem uint32 readerSem uint32 readerCount int32 readerWait int32 } //example var rw sync.RWMutex func Something(){ // Lock() UnLock() 获取和释放写锁 // RLock() RUnlock() 获取和释放读锁 } sync.Cond 条件锁 sync.Cond 实现了一个条件变量，在 Locker 的基础上增加了一个消息通知的功能，其内部维护了一个等待队列，队列中存放的是所有等待在这个 sync.Cond 的 goroutine，即保存了一个通知列表。可以用来唤醒一个或所有因等待条件变量而阻塞的 goroutine，以此来实现多个 Go 程间的同步。&#xA;源码 type Cond struct { noCopy noCopy L Locker // 基于原生的锁 notify notifyList //通知列表 checker copyChecker } // 基于一个锁来创建，可以是 RWMutex 或 Mutexs func NewCond(l Locker) *Cond { return &amp;amp;Cond{L: l} } // 挂起 goroutine 直到调用 Broadcast和Signal func (c *Cond) Wait() { c.</description>
    </item>
    <item>
      <title>Go性能分析</title>
      <link>https://domyson.github.io/post/language/go/pprof/</link>
      <pubDate>Fri, 23 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/pprof/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。对于单元测试中单元的含义，一般要根据实际情况去判定其具体含义，如 C语言中单元指一个函数,单元就是人为规定的最小的被测功能模块。单元测试是在软件开发过程中要进行的最低级别的测试活动，软件的独立单元将在与程序的其他部分相隔离的情况下进行测试。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Go协程的思考</title>
      <link>https://domyson.github.io/post/language/go/goroutine/</link>
      <pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/goroutine/</guid>
      <description>&lt;h1 id=&#34;栈&#34;&gt;栈&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;一个 os 线程会有一个给固定大小的内存块（一般是 2MB），用来存储当前线程中调用或挂起函数的内部变量，固定大小的栈对于复杂和深层次递归是不够的，而 Goroutine 会以一个很小的栈（2KB）开始其生命周期，这个栈会动态伸缩，最大能到达 1GB（32位系统是 250M）&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;调度方式&#34;&gt;调度方式&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;os 线程由操作系统内核调用，每过一定时间（毫秒），硬件计时器会中断处理器，并调用一个名为 scheduler 的内建函数，这个函数会挂起当前执行的线程并保存内存中它的寄存器内存，然后检查线程列表并决定下一次执行哪个线程，并从内存中恢复该线程的寄存器信息，恢复该线程的线程并执行，这就是上下文切换，增加了 CPU 的运行周期。而 Go 的 runtime 包含了自身的调度器，和 os 线程不同是，&lt;code&gt;Goroutine&lt;/code&gt; 属于用户级线程由语言支持，调度由语言支持，所有开销会减少很多（相比于内核上下文切换）。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
  </channel>
</rss>
