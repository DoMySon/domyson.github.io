<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Anywhere on 朝花夕拾</title>
    <link>https://domyson.github.io/categories/anywhere/</link>
    <description>Recent content in Anywhere on 朝花夕拾</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 24 May 2024 02:02:41 +0800</lastBuildDate>
    <atom:link href="https://domyson.github.io/categories/anywhere/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>anywhere 客户端框架概述</title>
      <link>https://domyson.github.io/post/anywhere/0/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/anywhere/0/</guid>
      <description>&lt;h1 id=&#34;序&#34;&gt;序&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;Anywhere&lt;/code&gt; 是一个基于 Unity 引擎的&lt;code&gt;GamePlay&lt;/code&gt;框架，脱离 &lt;code&gt;Monobehaviour&lt;/code&gt; 开发，致力简化开发流程。内部提供了一个&lt;code&gt;伪ECS&lt;/code&gt;的上层抽象来开发它，但事实上你并不一定需要使用这个&lt;code&gt;ECS&lt;/code&gt;，你也可以使用自定义的上层，比如自己实现像&lt;code&gt;MVCC&lt;/code&gt;，或者是&lt;code&gt;MVC&lt;/code&gt;的上层封装。让开发聚焦在游戏玩法而非一些底层架构上。Anywhere有两重含义，一可以实现任意类型的游戏，二可以在任意地方调动，而非需要定义一个字段保存访问索引。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Anywhere的一些设计思想不算是纯粹的&lt;code&gt;OOP&lt;/code&gt;，它有ECS的概念，也有&lt;code&gt;type embedding&lt;/code&gt;的概念，而且设计概念大部分是参考面过过程和内嵌的设计思想，所以理解曲线会比较困难&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;设计目标&#34;&gt;设计目标&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;无框架化，它之所有不提供是为了更好的设计出不同品类的游戏，而我在近10年的游戏开发生涯中，我始终觉得框架的约束即使最大的约束，因为业务的多样性和非明确性的特点，一般游戏后期的一些奇奇怪怪的需求总是会迫使你绕过框架的约束从而形成屎山code，所以我希望&lt;code&gt;Anywhere&lt;/code&gt;框架本身可以尽可能的简单，让开发者可以自由的去选择框架的约束。你可使用&lt;code&gt;Anywhere&lt;/code&gt;的一部分，或者全部，甚至是都不需要。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;无&lt;code&gt;MonoBehaviour&lt;/code&gt;编程设计，解除引擎原始的约束，更自由的编程方式，像之前开发游戏，一个角色身上可能挂在各式各样的组件，一旦后期业务变动很容易出现引用丢失或者维护起来更为困难，而且一些特殊的时候可能还需要设置一下脚本的执行顺序，给维护带来巨大的不便（如我之前所呆的项目各种口口相传的细节规范，让开发痛不欲生）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;模块化，&lt;code&gt;Anywhere&lt;/code&gt;的一大特色，以像&lt;code&gt;C library&lt;/code&gt;的方式来组织模块，让模块之间可以互相调用，并且可以互相替换，让开发者可以自由的去选择模块的约束。选择何种内置模块，或者是自定义模块由开发者决定，这也是使用 &lt;code&gt;Anywhere&lt;/code&gt; 唯一的约束，你的模块可以是框架，也可以是&lt;code&gt;Module&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;简单化，&lt;code&gt;Anywhere&lt;/code&gt; 本身只提最必要的一些基础组件，你可以重新实现，而并非是必要的，就是这么随意，就像它的名字一样。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;自由化，游戏开发是自由的，是创造性的，&lt;code&gt;Anywhere&lt;/code&gt; 不会约束你干什么，你只需要关注你的想法，怎么做取决于你的点子。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;去屎山，一旦使用&lt;code&gt;Anywhere&lt;/code&gt;的&lt;code&gt;Module&lt;/code&gt;约束，那么它一定是强类型约束，这么做的目的是让业务不容易形成屎山，避免屎上添粪的情况出现（我所在的一些项目就是这样，后期持续性优化，由于业务量巨大，实难以支撑）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;非文档约束性组件控制器绑定，面向对象的模式必然导致代码变得复杂，因使用内嵌代替&lt;code&gt;OOP&lt;/code&gt;，但显然C#做不到，需要额外的封装，但过于麻烦不符合&lt;code&gt;Anywhere&lt;/code&gt;的设计哲学，故通过静态泛型约束实现。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;无任何反射调度，提高代码的运行速度。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;Hybrid&lt;/code&gt;集成（todo）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>datatable</title>
      <link>https://domyson.github.io/post/anywhere/3/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/anywhere/3/</guid>
      <description>简介 DatatableModule 是一个基于 kpb 编码的配置文件管理系统,它定义了一个配置文件的数据结构，并提供了相应的API来操作和访问配置文件。在Anywhere中它是一个GameComponent。它包含了一个代码生成器，和数据解析器和编码器。&#xA;数据表的加载只有4(2)个接口 LoadDatatable&amp;lt;T&amp;gt;(bool lazy) GetRow&amp;lt;T&amp;gt;(int row) 以及一套同作用的异步接口，前者获取一整张表，后者获取某表的某一行数据，即对应的数据结构体。&#xA;Datatable 静默行为是 Lazy load 对于同一张数据表，它只会根据需要读取指定行然后才缓存，而不是一次性读取所有表格。&#xA;Feature lazy load,它不会加载表格的所有数据，而是按照需要动态一部分一部分的加载，直到全部加载完毕。&#xA;DatatableModule 加载接口提供同步和异步两种模式，也可以加载远程资源，依赖于 Resource&#xA;DatatableModule 提供代码和数据生成的编辑器，无需关注实现逻辑。&#xA;多种类型数据支持 bool,int,float,string,binary,int*,float*,string*,满足绝大部分场景 （2024/05/23）增加了定长数据的支持，减少内存消耗。&#xA;基于kproto编码协议，极小的二进制文件，以及极快的编解码速度。&#xA;栈内存映射，大部分情况下不需要开辟堆空间，节省一部分堆内存的分配，减少Mono Reserved的分配。</description>
    </item>
    <item>
      <title>ECS</title>
      <link>https://domyson.github.io/post/anywhere/1/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/anywhere/1/</guid>
      <description>序 这篇文章仅仅是介绍如何使用Anywhere 集成 ECS 框架，ECS并非必须的，甚至可以无框架化，就像我们第一次做Demo的时候一样，不要迷信框架，发挥自己的想象力去开发一个好玩的游戏才是最重要的，需要注意的是，本篇ECS并非是unity的ECS，它没有burst，也没有job system，而是一种设计思想。&#xA;本编会按照ECS的定义手动实现一个ECS框架，会有自己的一些设计糅杂在一起。&#xA;架构 System System 用于描述一个实体的行为，比如MovementSystem，AnimationSystem等，System 之间可以相互组合，比如MovementSystem和AnimationSystem组合在一起，就是一个CharacterController&#xA;Component Component 用于描述一个实体的状态，比如Transform，Rigidbody，Animator等,Component 之间可以相互组合，比如Rigidbody和Animator组合在一起，就是一个Character，Component 之间可以相互组合，比如Rigidbody和Animator组合在一起，就是一个Character,Component 之间可以相互组合，比如Rigidbody和Animator组合在一起，就是一个Character&#xA;Enity Entity 用于描述一个实体的状态，比如Transform，Rigidbody，Animator等,Entity 之间可以相互组合，比如Rigidbody和Animator组合在一起，就是一个Character，Entity 之间可以相互组合，比如Rigidbody和Animator组合在一起，就是一个Character，&#xA;Chunk Archetype </description>
    </item>
    <item>
      <title>EntityManager</title>
      <link>https://domyson.github.io/post/anywhere/5/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/anywhere/5/</guid>
      <description>EntityManager是一个很重要的模块，像游戏开发本身就是视觉感知，而EntityManager是对所有场景物体的统一抽象封装, 并提供一系列通用操作，EntityManager 本身是一个抽象类，提供了一定程度的通用性操作，但针对一些特殊情况我们还是需要针对特定问题特定实现（千万不想要想着做平，来自某家公司的教训:)）&#xA;EntityManager 附带一个默认的 EntityController,提供一些常规的实体控制，像 Anywhere的UI框架就是基于 EntityManager的一个具体实现。&#xA;Entity 抽象描述一个物体的实体，它的生命周期函数定义类似于GameComponent,但是它的调度不由GameEntry而是 GameComponent。&#xA;简单来说，要创建一个物体首先我们需要定义它的逻辑模板（骨架）以及它的数据（描述）&#xA;举个例子&#xA;public struct EnemyData:IEntityData{ // 对于实体数据接口，资源名必不可少 public string Assets {get;set;} public void OnCtor(){ // 有些时候，实体的数据更关卡等级或这地图这类外部数据挂钩，可能需要在这里动态设置一次 } } // 定义Entity的逻辑模板 public struct Enemy:Entity { protected EnemyData userdata; protected void OnCtor(){ // init setup... } protected void OnUpdate(float delta,float unscaleDelta){ // loop logic. } } void dosomething(){ // 直接在默认的EntityManager中创建一个实体 GameEntry.GetComponent&amp;lt;EntityManager&amp;gt;().Load&amp;lt;Enemy&amp;gt;(new EnemyData()); } 对于实体的销毁，像敌人死亡，特效消失之类的，仅仅只需要设置一个 Alive 属性，即可完成，生命周期由EntityManger自行决断。&#xA;需要注意的是 继承IEntityData的数据模板是会一直复用的，它与 Entity的复用规则不同，后者复用的是Entity所持有的实体，因为它本身只是一系列函数集合且很少会带有数据并不会占用太多的内存，而前者大部分情况下是都是通过读表获取，复杂的实体数据可能会导致内存异常大，所以保留实体数据是EntityManager的默认行为。&#xA;EntitySettings EntityManager可能需要在某些大量对象时使用对象池（Entity），或者内存池(EntityData),但在大多数情况下，框架并不清楚是否需要对象池，或者是需要一个定长周期的物体（子弹或者特效）。</description>
    </item>
    <item>
      <title>Resource</title>
      <link>https://domyson.github.io/post/anywhere/2/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/anywhere/2/</guid>
      <description>简介 Resource 是一个全自动化，且简单易用的资源管理系统,继承于GameComponet实现 ，它内部使用RC的方式来管理资源的引用，且不需要手动显示释放,而是通过拦截finalizer的方式，来达到释放的目的，比手动安全性更高，也更易用。&#xA;它仅提供了两组接口资源加载接口LoadAsset LoadAssetAsync，。并提供了虚拟化的方式加载，在编辑器模式下不会真正的构建AssetBundle包，从而提供开发效率。&#xA;Resource也包括流场景构建，可以将整个场景都作为热更新资源。&#xA;Feature 自动化检测文件变动 通过Radix算法，监控资源变动，来自动构建manifest。上层只需要关注资源本身，无需关注AssetBundle包的构建。做到对上层完全无感。&#xA;自动化引用计数 通过 RC+ finalizer，监控资源的引用，来自动释放资源。且无需轮询检查资源的引用计数，提供更好的性能，做到对上层完全无感。也没有手动释放接口，提高安全性和易用性&#xA;自动化冗余剔除 在构建的时候自动收集冗余资源，如像A-&amp;gt;(C,D) B-&amp;gt;(C) 此时(A,D)将会作为一个的bundle，而C则会单独作为一个bundle&#xA;Profile资源使用分析，用以在运行时统计各个资源的引用和加载数&#xA;自定义流处理，支持加密等自定义操作&#xA;多种模式支持&#xA;Builtin: 内建资源，默认将资源插入母包中。&#xA;Remote: 远程资源模式，仅需要配置远程资源地址即可，所有资源不会在本地存盘，只会在内存中使用，使用完后立即释放，防止被反编译资源&#xA;无感知资源更新 一般出现资源更新的时候，都是先下载到本地，然后再通过加载本地资源的方式实现， 现由FS映射的远程目录，通过分流的方式，可以实现一边从远程直接读取，并copy另外一部分流到本地磁盘，减少重新读盘的情况。 对于下载过程对于玩家而言完全无感，其本身下载速度是可以被控制，当前并没有暴露此接口（因为带宽值是动态变化的，无法根据不同的条件找到一个合理值），只是需要设定一个百分率阈值，内部自动计算下载速度尽可能保证达到预期值。&#xA;后续计划 现阶段Resource是依赖于Assetbundle 后续会抽象出一层 FS 以提供自定义流提供更多可操作性和安全性。 已实现&#xA;Resource现在可以说是完全不能脱离Unity独立运行，这不是一个好的方式，我期望提供更高的抽象满足多个引擎的需求。当完成这一步时只需要在Unity中需要手动实现一个Adaptor即可。</description>
    </item>
  </channel>
</rss>
