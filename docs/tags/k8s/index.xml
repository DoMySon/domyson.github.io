<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>k8s on Treasure</title>
    <link>https://domyson.github.io/tags/k8s/</link>
    <description>Recent content in k8s on Treasure</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 11 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://domyson.github.io/tags/k8s/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>kubernetes</title>
      <link>https://domyson.github.io/post/cloud_native/k8s/</link>
      <pubDate>Sun, 11 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/post/cloud_native/k8s/</guid>
      <description>什么是k8s k8s是为容器服务而生的一个可移植容器的编排管理工具
K8S实现了什么 服务发现 （etcd) 服务调度 （kube-scheduler） 负载均衡 (service) 服务自愈 (controller) 服务弹性扩容 横向扩容 存储卷挂载 (volume) 调度 Kubernetes 可以把用户提交的容器放到 Kubernetes 管理的集群的某一台节点上去。Kubernetes 的调度器是执行这项能力的组件，它会观察正在被调度的这个容器的大小、规格。 比如说它所需要的 CPU 以及它所需要的 memory，然后在集群中找一台相对比较空闲的机器来进行一次 placement，也就是一次放置的操作。
自动修复 Kubernetes 有一个节点健康检查的功能，它会监测这个集群中所有的宿主机，当宿主机本身出现故障，或者软件出现故障的时候，这个节点健康检查会自动对它进行发现。Kubernetes 会把运行在这些失败节点上的容器进行自动迁移，迁移到一个正在健康运行的宿主机上，来完成集群内容器的一个自动恢复。
水平伸缩 Kubernetes 有业务负载检查的能力，它会监测业务上所承担的负载，如果这个业务本身的 CPU 利用率过高，或者响应时间过长，它可以对这个业务进行一次扩容。
k8s架构 Kubernetes 架构是一个比较典型的二层架构和 server-client 架构。Master 作为中央的管控节点，会去与 Node 进行一个连接。 所有 UI 的、clients、这些 user 侧的组件，只会和 Master 进行连接，把希望的状态或者想执行的命令下发给 Master，Master 会把这些命令或者状态下发给相应的节点，进行最终的执行。
Master节点 Apiserver 整个系统的对外接口，供客户端和其它组件调用，组件与组件之间一般不进行独立的连接，都依赖于 API Server 进行消息的传送
Scheduler 负责对集群内部的资源进行调度，如把一个用户提交的 Container，依据它对 CPU、对 memory 请求大小，找一台合适的节点，进行放置
Controller manager 负责管理控制器，第一个自动对容器进行修复、第二个自动进行水平扩张
etcd 是一个分布式的一个存储系统，API Server 中所需要的这些原信息都被放置在 etcd 中，etcd 本身是一个高可用系统，通过 etcd 保证整个 Kubernetes 的 Master 组件的高可用性。</description>
    </item>
    
  </channel>
</rss>
