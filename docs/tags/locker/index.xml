<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>locker on 满船清梦压星河</title>
    <link>http://localhost:1313/tags/locker/</link>
    <description>Recent content in locker on 满船清梦压星河</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 11 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/locker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Locker</title>
      <link>http://localhost:1313/post/language/go/lock/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/language/go/lock/</guid>
      <description>sync.Mutex mutex相关的所有事情都是通过sync.Mutex类型的两个方法sync.Lock()和sync.Unlock()函数来完成的，前者用于获取sync.Mutex锁，后者用于释放sync.Mutex锁。sync.Mutex一旦被锁住，其它的Lock()操作就无法再获取它的锁，只有通过Unlock()释放锁之后才能通过Lock()继续获取锁。
不区分读写锁，只有Lock()与Lock()之间才会导致阻塞的情况
不与 Goroutine 关联
在Lock()和Unlock()之间的代码段称为资源的临界区(critical section)，在这一区间内的代码是严格被Lock()保护的，是线程安全的，任何一个时间点都只能有一个goroutine执行这段区间的代码。由于内核调度的不确定性，所以谁获取锁也是不确定的
sync.RWMutex RWMutex 基于 Mutex,并增加了读、写信号量，增加了获取读锁的计数
读锁和读锁兼容，写锁和读锁互斥，写锁和写锁互斥
可以同时申请多个读锁
读锁存在，则写锁阻塞，反之亦然
写锁存在，写锁和读锁都阻塞，同一时间仅一个能写
不与 Goroutine 关联
源码 //RwMutex source code type RWMutex struct{ w Mutex writerSem uint32 readerSem uint32 readerCount int32 readerWait int32 } //example var rw sync.RWMutex func Something(){ // Lock() UnLock() 获取和释放写锁 // RLock() RUnlock() 获取和释放读锁 } sync.Cond 条件锁 sync.Cond 实现了一个条件变量，在 Locker 的基础上增加了一个消息通知的功能，其内部维护了一个等待队列，队列中存放的是所有等待在这个 sync.Cond 的 goroutine，即保存了一个通知列表。可以用来唤醒一个或所有因等待条件变量而阻塞的 goroutine，以此来实现多个 Go 程间的同步。
源码 type Cond struct { noCopy noCopy L Locker // 基于原生的锁 notify notifyList //通知列表 checker copyChecker } // 基于一个锁来创建，可以是 RWMutex 或 Mutexs func NewCond(l Locker) *Cond { return &amp;amp;Cond{L: l} } // 挂起 goroutine 直到调用 Broadcast和Signal func (c *Cond) Wait() { c.</description>
    </item>
    
  </channel>
</rss>
