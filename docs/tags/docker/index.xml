<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on 满船清梦压星河</title>
    <link>https://domyson.github.io/tags/docker/</link>
    <description>Recent content in docker on 满船清梦压星河</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 12 Mar 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://domyson.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker</title>
      <link>https://domyson.github.io/post/docker/</link>
      <pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://domyson.github.io/post/docker/</guid>
      <description>&lt;h1 id=&#34;什么是docker&#34;&gt;什么是docker&lt;/h1&gt;
&lt;p&gt;Docker 是一个开源的容器引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者和系统管理员在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括 VMs（虚拟机）、bare metal、OpenStack 集群、云端、数据中心和其他的基础应用平台。容器是完全使用沙箱机制，相互之间不会有任何接口。&lt;/p&gt;
&lt;h1 id=&#34;有什么优势&#34;&gt;有什么优势&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;轻量，在一台机器上运行的多个Docker容器可以共享这台机器的操作系统内核；它们能够迅速启动，只需占用很少的计算和内存资源。镜像是通过文件系统层进行构造的，并共享一些公共文件。这样就能尽量降低磁盘用量，并能更快地下载镜像。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标准，Docker 容器基于开放式标准，能够在所有主流Linux版本、Microsoft Windows以及包括VM、裸机服务器和云在内的任何基础设施上运行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安全，Docker 赋予应用的隔离性不仅限于彼此隔离，还独立于底层的基础设施。Docker默认提供最强的隔离，因此应用出现问题，也只是单个容器的问题，而不会波及到整台机器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一次发布，到处使用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;docker和虚拟机&#34;&gt;Docker和虚拟机&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;容器和虚拟机具有相似的资源隔离和分配优势，但功能有所不同，因为容器虚拟化的是操作系统，而不是硬件，因此容器更容易移植，效率也更高。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;特性&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;容器&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;虚拟机&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;启动&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;秒级&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分钟级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;硬盘&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;MB&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;性能&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;接近原生&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;弱于原生&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;支持量&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;单机上千&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;单机几十左右&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;容器是一个应用层抽象，用于将代码和依赖资源打包在一起。 多个容器可以在同一台机器上运行，共享操作系统内核，但各自作为独立的进程在用户空间中运行 。与虚拟机相比， 容器占用的空间较少（容器镜像大小通常只有几十兆），瞬间就能完成启动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚拟机（VM）是一个物理硬件层抽象，用于将一台服务器变成多台服务器。 管理程序允许多个VM在一台机器上运行。每个VM都包含一整套操作系统、一个或多个应用、必要的二进制文件和库资源，因此占用大量空间。而且VM启动也十分缓慢 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;虚拟机更擅长于彻底隔离整个运行环境。例如，云服务提供商通常采用虚拟机技术隔离不同的用户。而 Docker 通常用于隔离不同的应用 ，例如前端，后端以及数据库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;docker基本组成&#34;&gt;Docker基本组成&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;镜像 （Image）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;容器（Container）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;仓库（Repository）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;镜像image-一个特殊的文件系统&#34;&gt;镜像（Image）—— 一个特殊的文件系统&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;操作系统分为内核和用户空间。对于Linux而言，内核启动后，会挂载root文件系统为其提供用户空间支持。而Docker镜像（Image），就相当于是一个root文件系统。Docker镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。 镜像不包含任何动态数据，其内容在构建之后也不会被改变。Docker设计时，就充分利用Union FS的技术，将其设计为分层存储的架构。 镜像实际是由多层文件系统联合组成。镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;容器container-镜像运行时的实体&#34;&gt;容器（Container）—— 镜像运行时的实体&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等 。容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。前面讲过镜像使用的是分层存储，容器也是如此。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。按照Docker最佳实践的要求，容器不应该向其存储层内写入任何数据 ，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此， 使用数据卷后，容器可以随意删除、重新run，数据却不会丢失。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;仓库repository-集中存放镜像文件的地方&#34;&gt;仓库（Repository）—— 集中存放镜像文件的地方&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;镜像构建完成后，可以很容易的在当前宿主上运行，但是， 如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry就是这样的服务。一个Docker Registry中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。所以说：镜像仓库是Docker用来集中存放镜像文件的地方类似于我们之前常用的代码仓库。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本 。我们可以通过&amp;lt;仓库名&amp;gt;:&amp;lt;标签&amp;gt;的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以latest作为默认标签。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;docker-registry公开服务和私有docker-registry&#34;&gt;Docker Registry公开服务和私有Docker Registry&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker Registry公开服务是开放给用户使用、允许用户管理镜像的Registry服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。最常使用的Registry公开服务是官方的Docker Hub ，这也是默认的Registry，并拥有大量的高质量的官方镜像，网址为：hub.docker.com/ 。在国内访问Docker Hub可能会比较慢国内也有一些云服务商提供类似于Docker Hub的公开服务。除了使用公开服务外，用户还可以在本地搭建私有Docker Registry 。Docker官方提供了Docker Registry镜像，可以直接使用做为私有Registry服务。开源的Docker Registry镜像只提供了Docker Registry API的服务端实现，足以支持Docker命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;image&#34;&gt;Image&lt;/h1&gt;
&lt;h2 id=&#34;查看拉取删除&#34;&gt;查看、拉取、删除&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;搜索镜像&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker search name[:tag]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拉取镜像,若不指定tag则默认拉取&lt;code&gt;latest&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker pull name[:tag]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看本地所有镜像&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker images&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除镜像，可以多个删除&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker rmi [option] image ... &lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt; 强制删除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;制作推送&#34;&gt;制作、推送&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在指定路径中找到 &lt;a href=&#34;https://domyson.github.io/post/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt; 并构建Image, 后面是路径，但路径中必须存在 &lt;code&gt;Dockerfile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker build -t [:namespace]/name:tag Path&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;给镜像赋予新的标签, &lt;code&gt;namespace&lt;/code&gt; 必须为 &lt;code&gt;dockerid&lt;/code&gt;，除非另外购买。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker tag oldname:oldtag  namespace/newname:newtag&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将镜像上传至 docker 仓库 DockerHub 上,&lt;code&gt;namespace&lt;/code&gt; 必须是用户名,也可以上传至 &lt;code&gt;Gitlab&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker push namespace/name:tag&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提交修改的镜像&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker commit [-a] [-m] CONTAINER [REPOSITORY[:TAG]]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-a&lt;/code&gt; 指明提交者&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-m&lt;/code&gt; 提交信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像。以后我们运行这个新镜像的时候，就会拥有原有容器最后的文件变化。
此方式更新的镜像有依赖通过 &lt;code&gt;docker save -o dst [REPOSITORY[:TAG]]&lt;/code&gt;存盘,删除所有镜像,再通过 &lt;code&gt;docker load -i path&lt;/code&gt; 加载新镜像。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;container&#34;&gt;Container&lt;/h1&gt;
&lt;h2 id=&#34;查看容器&#34;&gt;查看容器&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker ps [-a|-s]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-a&lt;/code&gt; 查看所有容器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-s&lt;/code&gt; 查看已启动的容器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;产看容器进程&#34;&gt;产看容器进程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker top containerID&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;移除容器&#34;&gt;移除容器&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;可以多个同时删除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;docker rm container ...  [option]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-f&lt;/code&gt; : 强制删除容器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-v&lt;/code&gt; : 若删除容器则数据卷也删除。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;停止容器&#34;&gt;停止容器&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;可以同时停止多个&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;docker stop container ...&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;启动容器&#34;&gt;启动容器&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker run [:--name] [:-e] [:-v] [:-h] [:--net] [:-p prot0:prot1] [:-d|-i] [:-t] [:--rm] [:--restart] [:--privileged=false] [:--ip] [:--network=] name:tag [:shell]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;run&lt;/code&gt; 命令将会启动 &lt;code&gt;dockerfile&lt;/code&gt; 中定义的 &lt;code&gt;CMD&lt;/code&gt; 或 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 指令。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--name=xxx&lt;/code&gt; 指定容器运行时的名称，可不选，默认为随机字符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-p Host0:Host1&lt;/code&gt; 表示本地 Host0 映射容器 Host1 端口,若为 &lt;code&gt;-P&lt;/code&gt; 则随机映射49000 ~ 49900 端口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-d&lt;/code&gt;：分离模式: 在后台运行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-h&lt;/code&gt;：指定主机域名。如 &lt;code&gt;-h domyson.cn&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-e&lt;/code&gt;：为 &lt;code&gt;dockerfile&lt;/code&gt; 中的 &lt;code&gt;ENV&lt;/code&gt; 的参数变量,设置环境变量，或者覆盖已存在的环境变量 &lt;code&gt;-e TZ=&amp;quot;Asia/Shanghai&amp;quot;&lt;/code&gt; 设置时区为上海。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-u&lt;/code&gt;：&lt;del&gt;指定执行用户，一般为 &lt;code&gt;root&lt;/code&gt;。&lt;/del&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--rm&lt;/code&gt;：停止容器就移除。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-it&lt;/code&gt;: 以交互模式运行容器 (不同于 &lt;code&gt;-d&lt;/code&gt; : 以分离模式运行容器),这意味着交互回话 session 结束时,容器就会停止运行，与 &lt;code&gt;-d&lt;/code&gt; 互斥。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-v&lt;/code&gt; : 容器内创建一个数据卷。多次重复使用 -v 标记可以创建多个数据卷，也可以挂载一个主机目录作为数据卷 path0:path1(其中path0是主机目录，path1是容器目录)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--link container&lt;/code&gt; : &lt;del&gt;连接到其他容器。&lt;/del&gt; 这个方法以后将被弃用，推荐使用 &lt;code&gt;--network&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--network NETWORK&lt;/code&gt;：指定连接到的网络。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--ip&lt;/code&gt;：指定容器的ip。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--restart&lt;/code&gt;：&lt;code&gt;no、on-failure:n、always&lt;/code&gt; 设置容器自动重启模式，若容器已经启动，可以通过 &lt;code&gt;docker update --restart args&lt;/code&gt; 来设置参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--privileged&lt;/code&gt;：真正给予 &lt;code&gt;Container 中 root 用户&lt;/code&gt; root权限，否则 &lt;code&gt;root&lt;/code&gt; 只是一个普通用户。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;shell&lt;/code&gt;：指定交互的方式，一般为bash &lt;code&gt;bash -c &amp;quot;cmd string&amp;quot;&lt;/code&gt;，这条命令将由启动容器执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;查看容器日志&#34;&gt;查看容器日志&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker logs [opt] CONTAINER&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-f&lt;/code&gt; : 跟踪日志输出&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--since&lt;/code&gt; :显示某个开始时间的所有日志&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-t&lt;/code&gt; : 显示时间戳&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--tail N&lt;/code&gt; :仅列出最新N条容器日志&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进入指定容器&#34;&gt;进入指定容器&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker exec [opt] CONTAINER shell [:args]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-d&lt;/code&gt; ：分离模式: 在后台运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-it&lt;/code&gt;：以交互模式运行容器 (不同于 -d : 以分离模式运行容器),这意味着交互回话 session 结束时,容器就会停止运行。与 &lt;code&gt;-d&lt;/code&gt; 互斥&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-u&lt;/code&gt;：指定运行用户,一般设置为 root&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进入容器内部之后，通过 &lt;code&gt;exit&lt;/code&gt; 退出&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;容器通讯方式&#34;&gt;容器通讯方式&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://domyson.github.io/2020/01/Docker-Network/&#34;&gt;See DockerNetwork&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;镜像体积优化&#34;&gt;镜像体积优化&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt; 由多个 &lt;code&gt;Layers&lt;/code&gt; 组成（上限是127层）。而 &lt;a href=&#34;https://domyson.github.io/2019/03/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt; 每一条指令都会创建一层 &lt;code&gt;Layers&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;优化基础镜像&#34;&gt;优化基础镜像&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;Alpine&lt;/code&gt; 基础镜像&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Alpine是一个高度精简又包含了基本工具的轻量级Linux发行版，基础镜像仅 &lt;code&gt;4.41MB&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;scratch&lt;/code&gt; 基础镜像&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;scratch是一个空镜像，只能用于构建其他镜像&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;busybox&lt;/code&gt; 基础镜像&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果希望镜像里可以包含一些常用的Linux工具，busybox镜像是个不错选择，镜像本身只有1.16M，非常便于构建小镜像。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;串联-dockerfile-指令&#34;&gt;串联 &lt;code&gt;Dockerfile&lt;/code&gt; 指令&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;通过  &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 和 &lt;code&gt;\&lt;/code&gt; 将多个 &lt;code&gt;Run&lt;/code&gt; 命令合并成一个&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;多段构建&#34;&gt;多段构建&lt;/h2&gt;
&lt;p&gt;待完善&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;&lt;/h2&gt;
&lt;h1 id=&#34;docker数据卷&#34;&gt;Docker数据卷&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;数据卷可以在容器之间共享和重用&lt;/li&gt;
&lt;li&gt;对数据卷的修改会立马生效&lt;/li&gt;
&lt;li&gt;对数据卷的更新，不会影响镜像&lt;/li&gt;
&lt;li&gt;数据卷默认会一直存在，即使容器被删除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建数据卷&#34;&gt;创建数据卷&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;在 run 命令中 -v /data 标记来创建一个数据卷并挂载到容器里。在一次 run 中多次使用可以挂载多个数据卷。(创建一个容器，并加载一个数据卷到容器的 /data 目录)

也可以在 Dockerfile 中使用  VOLUME  来添加一个或者多个新的卷到由该镜像创建的任意容器。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;删除数据卷&#34;&gt;删除数据卷&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;数据卷是被设计用来持久化数据的，它的生命周期独立于容器，Docker不会在容器被删除后自动删除数据卷，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的数据卷。如果需要在删除容器的同时移除数据卷。可以在删除容器的时候使用  docker rm -v  这个命令。无主的数据卷可能会占据很多空间，要清理会很麻烦。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;挂载一个主机目录作为数据卷&#34;&gt;挂载一个主机目录作为数据卷&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run -d -P --name web -v /src/webapp:/opt/webapp[:权限]

上面的命令加载主机的  /src/webapp  目录到容器的  /opt/webapp  目录，默认权限是读写，也可以指定为只读(ro)

--volumes-from 在run的时候指定数据卷容器
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查看数据卷的信息&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker inspect contianerID&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看所有数据卷&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker volume ls&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;清除所有无主数据卷&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker volume prune&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;docker权限验证&#34;&gt;Docker权限验证&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;版本&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker version&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登陆&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker login&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登出&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker logout&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;docker远程访问&#34;&gt;Docker远程访问&lt;/h1&gt;
&lt;h1 id=&#34;docker-compose&#34;&gt;Docker-Compose&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Docker-Compose&lt;/code&gt; （docker编排）是 docker 提供的一个命令行工具，用来定义和运行由多个容器组成的应用。可以通过 docker-compose.yml 文件声明式的定义应用程序的各个服务，并由单个命令完成应用的创建和启动。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Docker-Compose&lt;/code&gt;将所管理的容器分为三层，分别是工程（project），服务（service）以及容器（container）。Docker-Compose运行目录下的所有文件（docker-compose.yml，extends文件或环境变量文件等）组成一个工程，若无特殊指定工程名即为当前目录名。一个工程当中可包含多个服务，每个服务中定义了容器运行的镜像，参数，依赖。一个服务当中可包括多个容器实例，Docker-Compose并没有解决负载均衡的问题，因此需要借助其它工具实现服务发现及负载均衡。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
