<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 朝花夕拾</title>
    <link>https://domyson.github.io/post/</link>
    <description>Recent content in Posts on 朝花夕拾</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 07 Jul 2024 18:45:40 +0000</lastBuildDate>
    <atom:link href="https://domyson.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>makefile</title>
      <link>https://domyson.github.io/post/makefile/</link>
      <pubDate>Tue, 17 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/makefile/</guid>
      <description> makefile 很早就想写了，高阶概念总是忘了又忘，一千个人一千个哈姆雷特，理解抽象概念的方式各有不同&#xA;What&amp;rsquo;s makefile? </description>
    </item>
    <item>
      <title>AST 抽象语法树</title>
      <link>https://domyson.github.io/post/typelang/3/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/typelang/3/</guid>
      <description>序 还没写</description>
    </item>
    <item>
      <title>Bytecode</title>
      <link>https://domyson.github.io/post/typelang/5/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/typelang/5/</guid>
      <description>序 还没写</description>
    </item>
    <item>
      <title>grammer</title>
      <link>https://domyson.github.io/post/typelang/2/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/typelang/2/</guid>
      <description>序 还没写</description>
    </item>
    <item>
      <title>lex</title>
      <link>https://domyson.github.io/post/typelang/1/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/typelang/1/</guid>
      <description>&lt;h1 id=&#34;序&#34;&gt;序&lt;/h1&gt;&#xA;&lt;p&gt;对于一个源码文件而言，里面的内容只是一个个字符，机器是无法识别的，而词法分析器的作用类似于转义器，将一个个字符拆成若干个有特定意义的词，而这一过程称为词法分析，此时它也不能被机器(或者这个虚拟机)识别&lt;/p&gt;</description>
    </item>
    <item>
      <title>Register</title>
      <link>https://domyson.github.io/post/typelang/4/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/typelang/4/</guid>
      <description>序 还没写</description>
    </item>
    <item>
      <title>typelang</title>
      <link>https://domyson.github.io/post/typelang/0/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/typelang/0/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;这篇文章将会是一个系列，更新会比源码慢，文档写的也不会写的很完全，名字暂定 &lt;code&gt;typelang&lt;/code&gt;, C syntax-like&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;设计缘由&#34;&gt;设计缘由&lt;/h1&gt;&#xA;&lt;p&gt;早在2019之前就想开发一门脚本语言，一是加深编译原理的理解，二是觉得程序员不应该消耗在语言特性上，也一直想为自己的服务端框架 &lt;a href=&#34;https://domyson.github.io/post/skynet/skynet&#34;&gt;skynet-x&lt;/a&gt; 写一门dsl，现在是用lua作为服务的脚本端。但由于的若约束性导致在开发的时候很多同时并不够优雅，总是以一种奇怪的方式来解决问题，Lua本身并没有任何问题，它被设计之初是为了修补C的不足，但它的语法设计却并不符合我的预期。&lt;/p&gt;&#xA;&lt;p&gt;尽管它的性能是脚本语言中顶尖的，但是一些隐式写法并不能保证它的预期性能，如混合&lt;code&gt;table&lt;/code&gt;,过多的函数调用栈，字符串操作以及无类型系统。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;关于类型系统有利有弊，但我个人的观点是宁愿多出30%的开发时间，从而减少70%的bug。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>anywhere 客户端框架概述</title>
      <link>https://domyson.github.io/post/anywhere/0/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/anywhere/0/</guid>
      <description>&lt;h1 id=&#34;序&#34;&gt;序&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;Anywhere&lt;/code&gt; 是一个基于 Unity 引擎的&lt;code&gt;GamePlay&lt;/code&gt;框架，脱离 &lt;code&gt;Monobehaviour&lt;/code&gt; 开发，致力简化开发流程。内部提供了一个&lt;code&gt;伪ECS&lt;/code&gt;的上层抽象来开发它，但事实上你并不一定需要使用这个&lt;code&gt;ECS&lt;/code&gt;，你也可以使用自定义的上层，比如自己实现像&lt;code&gt;MVCC&lt;/code&gt;，或者是&lt;code&gt;MVC&lt;/code&gt;的上层封装。让开发聚焦在游戏玩法而非一些底层架构上。Anywhere有两重含义，一可以实现任意类型的游戏，二可以在任意地方调动，而非需要定义一个字段保存访问索引。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Anywhere的一些设计思想不算是纯粹的&lt;code&gt;OOP&lt;/code&gt;，它有ECS的概念，也有&lt;code&gt;type embedding&lt;/code&gt;的概念，而且设计概念大部分是参考面过过程和内嵌的设计思想，所以理解曲线会比较困难&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;设计目标&#34;&gt;设计目标&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;无框架化，它之所有不提供是为了更好的设计出不同品类的游戏，而我在近10年的游戏开发生涯中，我始终觉得框架的约束即使最大的约束，因为业务的多样性和非明确性的特点，一般游戏后期的一些奇奇怪怪的需求总是会迫使你绕过框架的约束从而形成屎山code，所以我希望&lt;code&gt;Anywhere&lt;/code&gt;框架本身可以尽可能的简单，让开发者可以自由的去选择框架的约束。你可使用&lt;code&gt;Anywhere&lt;/code&gt;的一部分，或者全部，甚至是都不需要。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;无&lt;code&gt;MonoBehaviour&lt;/code&gt;编程设计，解除引擎原始的约束，更自由的编程方式，像之前开发游戏，一个角色身上可能挂在各式各样的组件，一旦后期业务变动很容易出现引用丢失或者维护起来更为困难，而且一些特殊的时候可能还需要设置一下脚本的执行顺序，给维护带来巨大的不便（如我之前所呆的项目各种口口相传的细节规范，让开发痛不欲生）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;模块化，&lt;code&gt;Anywhere&lt;/code&gt;的一大特色，以像&lt;code&gt;C library&lt;/code&gt;的方式来组织模块，让模块之间可以互相调用，并且可以互相替换，让开发者可以自由的去选择模块的约束。选择何种内置模块，或者是自定义模块由开发者决定，这也是使用 &lt;code&gt;Anywhere&lt;/code&gt; 唯一的约束，你的模块可以是框架，也可以是&lt;code&gt;Module&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;简单化，&lt;code&gt;Anywhere&lt;/code&gt; 本身只提最必要的一些基础组件，你可以重新实现，而并非是必要的，就是这么随意，就像它的名字一样。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;自由化，游戏开发是自由的，是创造性的，&lt;code&gt;Anywhere&lt;/code&gt; 不会约束你干什么，你只需要关注你的想法，怎么做取决于你的点子。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;去屎山，一旦使用&lt;code&gt;Anywhere&lt;/code&gt;的&lt;code&gt;Module&lt;/code&gt;约束，那么它一定是强类型约束，这么做的目的是让业务不容易形成屎山，避免屎上添粪的情况出现（我所在的一些项目就是这样，后期持续性优化，由于业务量巨大，实难以支撑）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;非文档约束性组件控制器绑定，面向对象的模式必然导致代码变得复杂，因使用内嵌代替&lt;code&gt;OOP&lt;/code&gt;，但显然C#做不到，需要额外的封装，但过于麻烦不符合&lt;code&gt;Anywhere&lt;/code&gt;的设计哲学，故通过静态泛型约束实现。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;无任何反射调度，提高代码的运行速度。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;Hybrid&lt;/code&gt;集成（todo）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>datatable</title>
      <link>https://domyson.github.io/post/anywhere/3/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/anywhere/3/</guid>
      <description>简介 DatatableModule 是一个基于 kpb 编码的配置文件管理系统,它定义了一个配置文件的数据结构，并提供了相应的API来操作和访问配置文件。在Anywhere中它是一个GameComponent。它包含了一个代码生成器，和数据解析器和编码器。&#xA;数据表的加载只有4(2)个接口 LoadDatatable&amp;lt;T&amp;gt;(bool lazy) GetRow&amp;lt;T&amp;gt;(int row) 以及一套同作用的异步接口，前者获取一整张表，后者获取某表的某一行数据，即对应的数据结构体。&#xA;Datatable 静默行为是 Lazy load 对于同一张数据表，它只会根据需要读取指定行然后才缓存，而不是一次性读取所有表格。&#xA;Feature lazy load,它不会加载表格的所有数据，而是按照需要动态一部分一部分的加载，直到全部加载完毕。&#xA;DatatableModule 加载接口提供同步和异步两种模式，也可以加载远程资源，依赖于 Resource&#xA;DatatableModule 提供代码和数据生成的编辑器，无需关注实现逻辑。&#xA;多种类型数据支持 bool,int,float,string,binary,int*,float*,string*,满足绝大部分场景 （2024/05/23）增加了定长数据的支持，减少内存消耗。&#xA;基于kproto编码协议，极小的二进制文件，以及极快的编解码速度。&#xA;栈内存映射，大部分情况下不需要开辟堆空间，节省一部分堆内存的分配，减少Mono Reserved的分配。</description>
    </item>
    <item>
      <title>EntityManager</title>
      <link>https://domyson.github.io/post/anywhere/5/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/anywhere/5/</guid>
      <description>EntityManager是一个很重要的模块，像游戏开发本身就是视觉感知，而EntityManager是对所有场景物体的统一抽象封装, 并提供一系列通用操作，EntityManager 本身是一个抽象类，提供了一定程度的通用性操作，但针对一些特殊情况我们还是需要针对特定问题特定实现（千万不想要想着做平，来自某家公司的教训:)）&#xA;EntityManager 附带一个默认的 EntityController,提供一些常规的实体控制，像 Anywhere的UI框架就是基于 EntityManager的一个具体实现。&#xA;Entity 抽象描述一个物体的实体，它的生命周期函数定义类似于GameComponent,但是它的调度不由GameEntry而是 GameComponent。&#xA;简单来说，要创建一个物体首先我们需要定义它的逻辑模板（骨架）以及它的数据（描述）&#xA;举个例子&#xA;public struct EnemyData:IEntityData{ // 对于实体数据接口，资源名必不可少 public string Assets {get;set;} public void OnCtor(){ // 有些时候，实体的数据更关卡等级或这地图这类外部数据挂钩，可能需要在这里动态设置一次 } } // 定义Entity的逻辑模板 public struct Enemy:Entity { protected EnemyData userdata; protected void OnCtor(){ // init setup... } protected void OnUpdate(float delta,float unscaleDelta){ // loop logic. } } void dosomething(){ // 直接在默认的EntityManager中创建一个实体 GameEntry.GetComponent&amp;lt;EntityManager&amp;gt;().Load&amp;lt;Enemy&amp;gt;(new EnemyData()); } 对于实体的销毁，像敌人死亡，特效消失之类的，仅仅只需要设置一个 Alive 属性，即可完成，生命周期由EntityManger自行决断。&#xA;需要注意的是 继承IEntityData的数据模板是会一直复用的，它与 Entity的复用规则不同，后者复用的是Entity所持有的实体，因为它本身只是一系列函数集合且很少会带有数据并不会占用太多的内存，而前者大部分情况下是都是通过读表获取，复杂的实体数据可能会导致内存异常大，所以保留实体数据是EntityManager的默认行为。&#xA;EntitySettings EntityManager可能需要在某些大量对象时使用对象池（Entity），或者内存池(EntityData),但在大多数情况下，框架并不清楚是否需要对象池，或者是需要一个定长周期的物体（子弹或者特效）。</description>
    </item>
    <item>
      <title>Resource</title>
      <link>https://domyson.github.io/post/anywhere/2/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/anywhere/2/</guid>
      <description>简介 Resource 是一个全自动化，且简单易用的资源管理系统,继承于GameComponet实现 ，它内部使用RC的方式来管理资源的引用，且不需要手动显示释放,而是通过拦截finalizer的方式，来达到释放的目的，比手动安全性更高，也更易用。&#xA;它仅提供了两组接口资源加载接口LoadAsset LoadAssetAsync，。并提供了虚拟化的方式加载，在编辑器模式下不会真正的构建AssetBundle包，从而提供开发效率。&#xA;Resource也包括流场景构建，可以将整个场景都作为热更新资源。&#xA;Feature 自动化检测文件变动 通过Radix算法，监控资源变动，来自动构建manifest。上层只需要关注资源本身，无需关注AssetBundle包的构建。做到对上层完全无感。&#xA;自动化引用计数 通过 RC+ finalizer，监控资源的引用，来自动释放资源。且无需轮询检查资源的引用计数，提供更好的性能，做到对上层完全无感。也没有手动释放接口，提高安全性和易用性&#xA;自动化冗余剔除 在构建的时候自动收集冗余资源，如像A-&amp;gt;(C,D) B-&amp;gt;(C) 此时(A,D)将会作为一个的bundle，而C则会单独作为一个bundle&#xA;Profile资源使用分析，用以在运行时统计各个资源的引用和加载数&#xA;自定义流处理，支持加密等自定义操作&#xA;多种模式支持&#xA;Builtin: 内建资源，默认将资源插入母包中。&#xA;Remote: 远程资源模式，仅需要配置远程资源地址即可，所有资源不会在本地存盘，只会在内存中使用，使用完后立即释放，防止被反编译资源&#xA;无感知资源更新 一般出现资源更新的时候，都是先下载到本地，然后再通过加载本地资源的方式实现， 现由FS映射的远程目录，通过分流的方式，可以实现一边从远程直接读取，并copy另外一部分流到本地磁盘，减少重新读盘的情况。 对于下载过程对于玩家而言完全无感，其本身下载速度是可以被控制，当前并没有暴露此接口（因为带宽值是动态变化的，无法根据不同的条件找到一个合理值），只是需要设定一个百分率阈值，内部自动计算下载速度尽可能保证达到预期值。&#xA;淘汰策略 当某个Assetbundle的引用计数为0时候，底层不会立即释放它，而是根据它过往的加载次数判断下一次淘汰次数，越大将会越晚淘汰，当然也提供了强制卸载函数。&#xA;后续计划 现阶段Resource是依赖于Assetbundle 后续会抽象出一层 FS 以提供自定义流提供更多可操作性和安全性。 已实现&#xA;Resource现在可以说是完全不能脱离Unity独立运行，这不是一个好的方式，我期望提供更高的抽象满足多个引擎的需求。当完成这一步时只需要在Unity中需要手动实现一个Adaptor即可。</description>
    </item>
    <item>
      <title>redis</title>
      <link>https://domyson.github.io/post/redis/</link>
      <pubDate>Thu, 24 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/redis/</guid>
      <description>Redis Remote Dictionary Server,采用 ANSI C 编写的 K-V数据库&#xA;Redis命令&#xA;Redis下载&#xA;类型 string 最大存储值为256mb，底层由SDS(simple dynamic string)实现，优势是访问长度仅需O(1)&#xA;hash&#xA;list 存储有序字符串，最大2^32-1个元素&#xA;set&#xA;同list，但不允许重复&#xA;sorted set 已排序的都字符串集合，但不允许重复 &amp;ndash; 其它&#xA;GEO 地理位置 HyperLogLog 基数统计 Bitsmap bit数组，类似boolean filter redis设计架构 单线程业务，多线程存储，redis6.0引入多线程也仅仅是为了提高解析命令的速度&#xA;虚拟内存&#xA;虚拟内存机制就是暂时把不经常访问的数据(冷数据)从内存交换到磁盘中，从而腾出宝贵的内存空间用于其它需要访问的数据(热数据)。通过VM功能可以实现冷热数据分离，使热数据仍在内存中、冷数据保存到磁盘。这样就可以避免因为内存不足而造成访问速度下降的问题。&#xA;击穿，穿透，雪崩 击穿 某个key在过期点的时候，突然出现大量请求查找这个key&#xA;穿透 访问一个不存在的key的时候&#xA;雪崩 指缓存中数据大批量到过期时间，访问落到db上，造成db压力过大&#xA;持久化机制 RDB RDB持久化，是指在指定的时间间隔内，执行指定次数的写操作，将内存中的数据集快照写入磁盘中，它是Redis默认的持久化方式。执行完操作后，在指定目录下会生成一个dump.rdb文件，Redis 重启的时候，通过加载dump.rdb文件来恢复数据&#xA;分为手动触发和自动触发&#xA;优点 适合大规模的数据恢复场景，如备份，全量复制等&#xA;缺点 没办法做到实时持久化/秒级持久化。&#xA;AOF 采用日志的形式来记录每个写操作，追加到文件中，重启时再重新执行AOF文件中的命令来恢复数据。它主要解决数据持久化的实时性问题&#xA;优点 数据一致性和完整性更高 缺点 内容越多，文件越大，恢复变慢，它需要将所有命令执行一遍&#xA;高可用 主从 类似mysql主从，master负责写，slave负责读&#xA;哨兵 监视其他节点的状态&#xA;集群 Gossip，HashSlot 16384&#xA;View&#xA;分布式锁 setnx setnx nx [expired]</description>
    </item>
    <item>
      <title>iptables and ipvs</title>
      <link>https://domyson.github.io/post/linux/iptables/</link>
      <pubDate>Sat, 19 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/linux/iptables/</guid>
      <description>iptables iptables 基于 netfilter 采用一条条规则链表，时间复杂度为O(n)，最主要的是 iptables 专为防火墙设计&#xA;ipvs ipvs 同样基于 netfilter，但底层采用的是hash表，索引复杂度为O(1)</description>
    </item>
    <item>
      <title>Go Memory</title>
      <link>https://domyson.github.io/post/language/go/memory/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/memory/</guid>
      <description>虚拟内存 虚拟内存屏蔽了RAM和Disk,向进程提供远大于物理内存的内存空间，简单来说就是使用了 memory map 分别映射了RAM和Disk的某个区域&#xA;堆栈 栈的方向向低地址增长，而堆恰好相反&#xA;Vritual memory address | kernel | |-------------------| 0xC00000000 | ---argv,evniron---| | -------stack -----| | ---------↓--------| | ----stack top-----| | | | unallocated | | | heap | | | uninitialized data| | initialized data | | program Code | | | 0x08048000 | | 0x00000000 Tcmalloc 也许同时google出品吧&#xA;Page&#xA;操作系统对内存管理以页为单位，Tcmalloc 也是如此，但其不一定相等，而是倍数关系(x64 Page 为8kb)&#xA;Span&#xA;一组连续的Page称为Span,是Tcmalloc的基本单位&#xA;ThreadCache&#xA;每个线程自身的Cache,包含多个空闲内存块链表，每个单独的链表大小是一致的，方便申请时不需要遍历全局，而且是无锁访问&#xA;CentarlCache&#xA;所有线程共享的空闲内存块，链表数量同 ThreadCache,当ThreadCache不够时会从其申请，但它是需要加锁&#xA;PageHeap&#xA;对堆内存的抽象，也是由若干链表组成，链表保存的是 Span，当 CentarlCache不足时，获取空闲Span然后拆分成若干内存块，并添加到对应大小的链表中以供分配，否则将会放回</description>
    </item>
    <item>
      <title>kproto 编码协议</title>
      <link>https://domyson.github.io/post/kproto/</link>
      <pubDate>Wed, 21 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/kproto/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;其实在&lt;code&gt;cobweb&lt;/code&gt;之初就设计了一种编码协议(kproto)，用于内部消息的编码,但因为公司项目长期需要维护以及开发（两款线上，一款开发中），所以一直未对此库进行维护，&#xA;而后期在研发的时候，发现需要与多种语言交互，显然 &lt;code&gt;json&lt;/code&gt;,&lt;code&gt;xml&lt;/code&gt; 不是一个很好的选择，而 &lt;code&gt;protobuf&lt;/code&gt; 对弱类型语言支持不友好。&lt;/p&gt;&#xA;&lt;h1 id=&#34;benchmark&#34;&gt;Benchmark&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cpu: Intel(R) Core(TM) i9-9900K CPU @ 3.60GHz&lt;/li&gt;&#xA;&lt;li&gt;os: windows11&lt;/li&gt;&#xA;&lt;li&gt;arch: amd64&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;table&gt;&#xA;&lt;thead&gt;&#xA;&lt;tr&gt;&#xA;&lt;th style=&#34;text-align:center&#34;&gt;format&lt;/th&gt;&#xA;&lt;th style=&#34;text-align:center&#34;&gt;compress rate&lt;/th&gt;&#xA;&lt;th style=&#34;text-align:center&#34;&gt;encode rate&lt;/th&gt;&#xA;&lt;th style=&#34;text-align:center&#34;&gt;decode rate&lt;/th&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/thead&gt;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;json std&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;0%&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;0%( 213.8 ns/op)&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;0%(1204ns/op)&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;proto v3&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;-40%&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;-51%(98.36 ns/op)&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;-84%(190.1ns/op)&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;kproto&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;-40%&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;-76% (65.21 ns/op)&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;-95%(62.18ns/op)&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>message</title>
      <link>https://domyson.github.io/post/skynet/1/</link>
      <pubDate>Fri, 22 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/skynet/1/</guid>
      <description>简介 skynet-x是基于actor 消息的服务框架，那么我们需要定义一套标准且高效的消息结构&#xA;Processor 一个伪线程的逻辑处理器概念，它分为独占和负载两种模式。&#xA;独占Processor是为了更好的处理实时性更高的业务，它不会被其他任务抢占&#xA;负载Processor又可分为两种运行态，均匀的处理业务以及从其他Processor上偷窃任务，尽量保证Processor不会过于闲置，除此之外，负载Processor可随着任务的变动而增加（不会超过最大设定值），特别的当某个任务陷入”死循环”或者是超出设定运行阈值的时候会重新创建一个Processor，并让之前的挂起（在C版本中将会被强制关闭）。&#xA;C版本和Go版本调度和设计上差异不大，但一些细节上的处理可能不同，因为C可以提供更多的底层控制&#xA;PID 一个 message 最重要的是消息地址，如果一个消息没有地址的话我们称为 dead-letter。 那么我们通过Pid 标定一个地址类型，&#xA;它表示该服务的唯一id (本质上是一个uint64)的类习惯，它一定能确保在当前节点以及集群中唯一的。&#xA;在服务本身未被关闭的时候，pid一定不会产生变动，但重新启动节点之后，它的值可能会发生改变，因为所有服务默认都是并发启动，除非手动指定了关系(这也是它与skynet-x的区别)，所以不要尝试保存这个pid&#xA;一旦能确定了一个pid的话，就可以通过 skynet.send(pid,cmd,...) or skynet.call(ti,pid,cmd,...) 将其发送出去了。&#xA;服务的消息队列 Actor 模型最重要的的概念是 mailbox,它代表了一个实体需要处理的队列容器，&#xA;得益于go的简单性，可以使用 channel 来实现，但这种方式的实现性能不高，因为 channel 底层的结构使用的是互斥锁，&#xA;所以我采用了mpsc 实现了无锁队列，性能更优于 channel&#xA;TODO: 吞吐量对比&#xA;消息的接受和发送 发送 用户不需要构建这个结构体，仅仅需要指定 destination 以及需要发送的数据，而且 skynet-x 消息投递被设计成不允许发送 nil 因为这是无任何意义的，相反它还会消耗服务投递的性能，如果确实有这种需求，可以发送 struct{}{}。&#xA;而且消息发送成功只能代表被 mailbox 接受了，不代表会被立即处理，而不会一定处理成功，所以需要正确理解这种方式。&#xA;如果发送失败，那么一定失败，并返回一个错误&#xA;接收 接受回调只包含5个关键参数 context,addr,session,mtype,argument&#xA;context 其实就是创建服务用户指定的结构指针，用于数据传递和状态修改&#xA;session 主要的作用是用以区分这条消息是否是同步请求， 如若大于0，则其值就是请求序列号,只需要通过 skynet.ret(msg) 返回即可&#xA;mtype 仅仅是一个消息类别的区分，类似于消息号，用户可自行定义，可作为rpc消息类型&#xA;argument 才是真实的数据，它可以是任意值，特别的，在lua中这个值是会被解构，在跨节点通讯这个值恒为 []byte，当不需要时记得 skynet.free 1.4.0 这个由底层回收，用户不用关心&#xA;异步消息 异步消息通过 skynet.</description>
    </item>
    <item>
      <title>skynet-x 服务器框架简介</title>
      <link>https://domyson.github.io/post/skynet/0/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/skynet/0/</guid>
      <description>&lt;p&gt;工作中曾经开发了一个&lt;code&gt;cobweb&lt;/code&gt;的分布式服务器框架（基于&lt;code&gt;golang&lt;/code&gt;,&lt;code&gt;c&lt;/code&gt;）,但是在实际开发过程中代码难以维护以及更新，主要是每次都需要跨平台进行编译，特别是&lt;code&gt;cgo&lt;/code&gt; 往往需要指定平台的系统库,而且一些不规范的使用方式造成无法充分发挥多核的优势，可以参见 &lt;code&gt;关于Go协程的思考&lt;/code&gt; 虽然1.16 支持抢占式，但错误的使用方式依然造成了cpu过高的问题。，后续重新设计了&lt;code&gt;skynet-x&lt;/code&gt; 是一个&lt;code&gt;actor&lt;/code&gt;模型分布式服务框架，使用&lt;code&gt;go&lt;/code&gt;编写。&lt;/p&gt;&#xA;&lt;p&gt;尽管&lt;code&gt;Actor&lt;/code&gt;模型和&lt;code&gt;CSP&lt;/code&gt;模型各有所有长，为什么不采用&lt;code&gt;CSP&lt;/code&gt;主要有两方面考虑。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;CSP&lt;/code&gt;模式使用尽管很简单，但是一个致命的问题是无法控制消息的优先级，当然若只处理一个&lt;code&gt;Channel&lt;/code&gt;那可以规避，那么为啥还需要使用&lt;code&gt;CSP&lt;/code&gt;,而且像go channel 本身是基于互斥锁（1.16）实现，且无法进行优化和更加精细的控制，只能依赖于&lt;code&gt;runtime&lt;/code&gt;的调度。（网上所说什么时候触发调度，我认为channel不能包含其中，它本质也是加锁导致切换）&lt;/li&gt;&#xA;&lt;li&gt;隔离性太弱，后续一些新的&lt;code&gt;channel&lt;/code&gt;引入也会造成破坏性修改，而且 &lt;code&gt;select-case&lt;/code&gt;模式等待的&lt;code&gt;channel&lt;/code&gt;会随着数量的增加性能会慢慢减弱。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;它是一个年轻的框架，仅仅经历了两款项目的迭代 现在版本为 &lt;code&gt;v1.6.0 2023-05-28&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.taptap.cn/app/229839&#34;&gt;羽翼军团&lt;/a&gt; v1.3.0&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.taptap.cn/app/215934&#34;&gt;我在民国淘古玩&lt;/a&gt; v.1.3.5&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;与skynet的差异&#34;&gt;与skynet的差异&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;增加了独占进程的概念，对于一些性能敏感的服务可以绕过公平调度的原则。（公平调度是一个很普遍但并非最优解的调度策略，但对于需要占用资源较多的进程就显得无力）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用协程而非线程，一个好处是对于一些假死服务我们可以重新启动它，其它代价远小于线程（尽管协程的开销很低，但我们尽量保证不会被滥用）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;一个简单的二进制文件，&lt;code&gt;skynet&lt;/code&gt;修改了lua部分虚拟机源码，而且大部分实现都是基于&lt;code&gt;lua&lt;/code&gt;实现，而我设计的是一个将脚本语言作为可选项的插件。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;所有库都是底层语言的实现方式，可控制力和性能更好，完全将业务和底层区分方便同时进行维护&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;无感的集群交互方式，调用其他服务（无论在不在本地）就像普通消息那样简单，不需要像&lt;code&gt;skynet&lt;/code&gt;需要显示调用&lt;code&gt;cluster&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;进程支持错误重启且消息不会丢失（beta)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;支持后续的&lt;a href=&#34;https://domyson.github.io/post/typelang/0&#34;&gt;DSL&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在2024/03我正计划重新用C实现了一版以提供更好的性能和更底层的控制&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>sktpmd</title>
      <link>https://domyson.github.io/post/skynet/3/</link>
      <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/skynet/3/</guid>
      <description>简介 sktpmd模块是skynet-x底层集群模块，它承担了skynet-x网络节点之间的通讯职能。全名为(skynet port managment daemon)&#xA;架构 sktpmd 为了满足对等网络的性质，所以每次和其他节点建立连接是有两条连接， 当A节点于B节点建立连接，首先A节点发送握手等待B确认，B确认完成之后重复走A的流程，这样一个双向连接就被建立了起来，1.6.0改变了个行为，对于像存在类似缓存，或者数据中心的业务而言的单向节点而言，只需要一条连接即可，节省资源。&#xA;sktpmd现在支持原始的tcp,udp,unix协议，后续规划可能由reliable udp实现，降低集群通讯延时并提供更好的性能和时延性。&#xA;远程命名服务，通过内置命令生成唯一的Name，通过Name来与其他节点通讯是友好的。&#xA;使用 启动也非常简单，无须任何代码，仅仅只需要在 conf.conf 中配置一下即可，使用的时候跟节点内通讯无任何区别。因为我已经作平了本地和节点之间的差异。&#xA;内部均由kproto进行编码,提供更快的序列化方式。&#xA;example call&#xA;skynet-x.send(&amp;#34;host:port@name&amp;#34;,&amp;#34;rpc&amp;#34;...) -- 通过域名或者地址+端口的形式和其他节点进行通讯 skynet-x.send(&amp;#34;alias&amp;#34;,&amp;#34;rpc&amp;#34;,...) -- 通过别名 skynet-x.send(pid, &amp;#34;rpc&amp;#34;,...) -- 通过pid亦可 tunnel 既然节点之间是双向连接，所以连接数量为 f(n) = n²-n，如果节点过的时候，势必造成 socket fd 消耗殆尽，&#xA;基于这个问题，可以通过内置的tun，来设置代理，这么一来，tun的作用相当于这个集群节点的网关。因为其内部的节点相对于其他 tun 代理是不可见的，&#xA;通过配置tun的规则开启多个，则可以实现业务拆分。&#xA;2022-10-07 此模块被弃用，可以用多节点转接的方式或代理的方式做到，如 send(&amp;quot;n1.n2.n3@name&amp;quot;)&#xA;服务发现 sktpmd 提供了一套服务发现机制，但其运作原理是不同于 etcd 或者 consul,它本身是一个惰性发现，它不需要一个中心服维持它们的关系。&#xA;sktpmd整个发现流程是基于 gossip 算法来发现的,但一些api依然可以主动触发，v1.6.0 这个模块将保留，因为集群模式的逻辑改变了&#xA;v1.6.0集群建立 v1.5.0 之前节点之间都是双向链接，但考虑到一个单向服务器，如 dns server,conf server 等，大部分是 request/response 模式，惰性连接的收益很大，所以去除之前的一些设计。&#xA;网络底层 参考 Go协程的思考,在linux下，使用了 epoll。所以尽量部署到 linux 下以发挥更好的性能</description>
    </item>
    <item>
      <title>zmalloc</title>
      <link>https://domyson.github.io/post/skynet/5/</link>
      <pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/skynet/5/</guid>
      <description>无论是对于C版本还是Go版本的skynet-x而言，一个高效的内存分配器可以提高内存的使用效率，这里效率无论是对于内存碎片亦或是GC而言，都是一种更高效的手段&#xA;基于 SLAB 算法的分段内存分配器 SLAB 最开始是阅读 linux 源码学习的算法，在skynet-x中它确实有更优秀的性能，因为它直接分配了一块大共用内存，所以不会产生任何GC和真实分配,但在业务开发过程中，一旦忘记释放 那么这段内存将不能再被使用和获取了（也就是野指针），直到程序结束。最后的保守策略依然会向runtime申请内存，将会导致内存占用过高。&#xA;而且内置的Debug模式也无法定位到这个指针，原因在于 golang 堆栈伸缩会导致指针地址变动，所以 Debug 只能定位到存在 memory-leak，而无法知道具体位置。若需要具体位置则需要hook这个调用栈，性能方面得不偿失&#xA;基于 sync.Pool 的分段内存分配器 将不同size的buffer放入不同的池中，按需进行分配，减少race的开销，这个方法虽然简单，但是性能是低于 slab-allocator。&#xA;但它确实能减轻心智负担，代价就是牺牲了部分性能以及gc压力，但这也是skynet-x默认使用的策略。如果需要使用可以在编译指令中指明slab&#xA;Zmalloc zmlloc 本身也是 slab的升级版本，增加可伸缩链表实现对于预分配内存额外部分的缓冲池。&#xA;在24个线程的cpu条件测试结果如下,zmalloc保持了一种稳定的时间复杂度，额外产生的内存分配也很少&#xA;- time(ns) alloc/op(B) slab-128 23.5 1 sync.Pool-128 2490 65562 zmalloc-128 43.31 16 slab-256 24 256 sync.Pool-256 2204 65562 zmalloc-256 44 16 slab-1024 92 1024 sync.Pool-1024 2490 65562 zmalloc-1024 49 17 slab-4096 365 4096 sync.Pool-4096 2210 65562 zmalloc-4096 45 23 API skynet.zalloc(n) 用以分配指定大小的内存块，考虑到 64在go中为tiny-size，直接会从P上分配，所以zmalloc分配块从128开始&#xA;skynet.zrealloc(buf,n) realloc函数会先检查buf，确保是否需要重新分配内存</description>
    </item>
    <item>
      <title>sync.pool</title>
      <link>https://domyson.github.io/post/language/go/sync.pool/</link>
      <pubDate>Fri, 15 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/sync.pool/</guid>
      <description>结构分析 type Pool struct { noCopy noCopy local unsafe.Pointer // P 本地池，固定尺寸，实际结构 [P]poolLocal，类似 void* 并附加长度构成了一个数组 localSize uintptr // size of the local array victim unsafe.Pointer // local from previous cycle victimSize uintptr // size of victims array New func() any } type poolChain struct{ head *poolChainElt tail *poolChainElt } type poolChainElt struct{ // 一个双向链表 poolDequeue next,prev *poolChainElt } type poolDequeue struct{ headtail uint64 vals []eface } type eface struct{ // 数据的真实内存分配，包括一个类型描述和实际数据 typ,val unsafe.</description>
    </item>
    <item>
      <title>sync.Map</title>
      <link>https://domyson.github.io/post/language/go/sync.map/</link>
      <pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/sync.map/</guid>
      <description>&lt;h1 id=&#34;syncmap-自带的安全-map&#34;&gt;&lt;code&gt;sync.Map&lt;/code&gt; 自带的安全 &lt;code&gt;map&lt;/code&gt;&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;源码位于 &lt;code&gt;${GOPATH}/src/sync/map.go&lt;/code&gt;，值得注意的是&lt;code&gt;sync.Map&lt;/code&gt;是&lt;code&gt;lazy load&lt;/code&gt;,不需要初始化&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Cgo</title>
      <link>https://domyson.github.io/post/language/go/cgo/</link>
      <pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/cgo/</guid>
      <description>cgo 一种go与c交互的技术 开启cgo 要求系统安装C/C++工具链，macos和linux(gcc 自带)，windows(mingw),并确保环境变量CGO_ENAVBLE=on,最后单个源码需要导入 import &amp;quot;C&amp;quot;&#xA;cgo类型映射 C type Cgo type Go type char C.char byte signed char C.schar int8 unsigned char C.uchar uint8 short C.short int16 unsigned short C.ushort uint16 int C.int int32 unsigned int C.uint uint32 long C.long int32 unsigned long C.ulong uint32 long long int C.longlong int64 unsigned long long int C.ulonglong uint64 float C.float float32 double C.double double size_t C.size_t uint 函数指针 go引用c的函数指针比较特别&#xA;官方给出的Example&#xA;我这里给出另外一种,通过c wrap 这个函数指针成一个普通函数，然后go调用它</description>
    </item>
    <item>
      <title>Mysql QA</title>
      <link>https://domyson.github.io/post/mysql100%E9%97%AE/</link>
      <pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/mysql100%E9%97%AE/</guid>
      <description>聚集、非聚集、联合索引 A1: 聚集索引（主键索引）所有ROW都会按照主键索引进行排序&#xA;A2: 非聚集索引即普通索引加上字段&#xA;A3: 几个字段组成的索引&#xA;A4: 聚集索引在物理上连续，非聚集索引在物理上不连续，但在逻辑上连续&#xA;A5: 聚集索引影响物理存储顺序，而非聚集索引不影响&#xA;A6: 聚集索引插入慢，查询快，非聚集索引反之&#xA;A7: 索引是通过二叉树来描述的，聚集索引的子叶节点也是数据节点，而非聚集索引子叶节点仍是索引节点&#xA;自增主键有哪些问题 A1: 分表分库的时候可能会出现重复情况（可使用uuid替代） A2: 产生表锁 A3: id耗尽 索引无效的情况 A1: 以%开头的LIKE语句，模糊匹配 A2: OR 前后字段未同时使用索引 A3: 数据类型隐式转换（varchar-&amp;gt;int) 查询优化 A1: 在WHERE和ORDER BY所涉及的列上加上索引 A2: SELECT避免使用*,SQL语句全部大写 A3: 避免WHERE对索引列上进行IS NULL判断，替换成IS NOT NULL A4: IN和NOT IN会导致全表扫描,替换为EXISTS或NOT EXISTS A5: 避免在索引上进行计算 A6: WHRER使用OR会放弃索引进而全表扫描 CHAR和VARCHAR的区别 A1: 存储和检索方式不同 A2: CHAR长度在创建时候指定(1~255),在存储时尾部全部填充空格 主键索引和唯一索引的区别 A1: 主键是一种约束 A2: 主键一定包含一个唯一索引，反之不成立 A3: 主键索引不允许包含空值，而唯一索引可以 A4: 一张表只能有一个主键索引，而唯一索引可以有多个 CPU飙升问题排查 A1: top命令观察mysqld A2: 若是，则show processlist查看是否是 SQL 的问题， A3: 若是，则检查执行计划是否准确，是否索引确实，数据是否太大 A4: kill上述线程，加索引，改内存，改SQL并重跑 A5: 若不是，可能是短时间有大量连接，可以限制最大连接数 如何创建索引 A1:</description>
    </item>
    <item>
      <title>Go GC分析</title>
      <link>https://domyson.github.io/post/language/go/gc/</link>
      <pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/gc/</guid>
      <description>如何启用GC跟踪 GODEBUG=gctrace=1 go run *.go&#xA;其中 gctrace=1 表示只针对这个进程进行GC追踪&#xA;标记流程 go采用三色标记法，主要是为了提高并发度，这样扫描过程可以拆分为多个阶段，而不用一次扫描全部&#xA;黑 根节点扫描完毕，子节点也扫描完毕&#xA;灰 根节点扫描完毕，子节点未扫描&#xA;白 未扫描&#xA;扫描是从 .bss .data goroutine栈开始扫描，最终遍历整个堆上的对象树&#xA;标记 mark 标记过程是一个广度优先的遍历过程，扫描节点，将节点的子节点推送到任务队列中，然后递归扫描子叶节点，直到所有工作队列被排空&#xA;mark阶段会将白色对象标记，并推入队列中变为灰色&#xA;memory barrier 保障了代码描述中对内存的操作顺序，即不会在编译期被编译器进行调整，也不会在运行时被CPU的乱序执行所打乱&#xA;write barrier 在应用进入 GC 标记阶段前的 stw 阶段，会将全局变量 runtime.writeBarrier.enabled 修改为 true，这时所有的堆上指针修改操作在修改之前便会额外调用 runtime.gcWriteBarrier&#xA;由于GC和Go主程序并发执行，所以必须要在扫描时监控内存可能出现的状态改变，所以需要写屏障，所以需要暂停GO主程序（STW）&#xA;hybrid wirte barrier (after go1.8) 改方式的基本思想是：对正在被覆盖的对象进行着色，且如果当时栈未扫描完成，则同样对指针进行着色&#xA;GC流程 程序启动会为每个P分配一个 mark worker 来标记内存，负责为进入STW做前期工作&#xA;起初认为所有 object 都被认定为白色 但栈，堆和全局变量的object被标记为灰色 GC会将灰色object标记为黑色，将灰色object所包含的所有指针所指向的地址都标记为灰色，递归这两个步骤，最终对象非黑即白，其中白色object即未被引用且可以被回收，如果object标记为no scan，则递归结束，标记为黑色&#xA;todo https://blog.csdn.net/asd1126163471/article/details/124113816</description>
    </item>
    <item>
      <title>tcp协议</title>
      <link>https://domyson.github.io/post/linux/tcp/</link>
      <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/linux/tcp/</guid>
      <description>什么是 Tcp 三次握手 tcp client发送连接请求报文，报文首部同步标记位 SYN=1 同时随机序列号 seq=x，此时 tcp client 进入 SYNC-SENT 状态的&#xA;tcp server 若同意连接则确认报文为 ACK=1,SYN=1,ASK=x+1,seq=y 返回给客户端，并进入 SYNC_RCVD 状态&#xA;tcp client 收到回复并确认 ACK 是否为1，seq 是否为 x+1,并返回报文 ACK=1,ASK=y+1,此时双方进入 ESTABLISHED 状态&#xA;四次挥手 主动方发送报文FIN=1,seq=last+1并进入FIN_WAIT_1,此时报文不能携带任何数据&#xA;被动方收到连接释放报文，并发送确认报文 ACK=1,ack=u+1,seq=v ，并进入 CLOSE_WAIT状态，但此时如果缓冲区存在未发送数据，那么需要继续发送（这也是 CLOSE_WAIT 持续的时长），主动方收到此条报文后进入 FIN_WAIT_2,因为还需要处理未发送数据&#xA;上一步执行完毕，被动方发送 FIN=1,ack=w+1,seq=u+1 并进入 LAST-ACK 状态，而主动方收到此条报文后进入 TIME_WAIT （2msl maximum segment life），之后才会进入 CLOSED&#xA;在主动方进入 CLOSED 之前，需要发送报文确认退出&#xA;2MSL 1MSL保证主动方最后的 ACK 能到达对端，1MSL 确保 ACK 重传&#xA;如何确保可靠性 三次握手，四次挥手确保连接和断开的可靠&#xA;记录了哪些数据被接受，哪些未接收，序列号保证了消息的顺序性&#xA;ACK应答，超时重传，失序重传，丢弃重复数据，流量控制，拥塞控制&#xA;重传机制 RTT，RTO Round-Trip Time 消息往返时间 Retransmission Timeout 超时重传</description>
    </item>
    <item>
      <title>unsafe包</title>
      <link>https://domyson.github.io/post/language/go/unsafe/</link>
      <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/unsafe/</guid>
      <description>Golang 默认指针是类型安全的，但它有很多限制。Golang 还有非类型安全的指针，这就是 unsafe 包提供的 unsafe.Pointer。在某些情况下，它会使代码更高效，当然，也更危险。unsafe 包用于 Go 编译器，在编译阶段使用。从名字就可以看出来，它是不安全的，官方并不建议使用。Go 语言类型系统是为了安全和效率设计的，有时，安全会导致效率低下。unsafe 包绕过了 Go 的类型系统，达到直接操作内存的目的，使用它有一定的风险性。但是在某些场景下，使用 unsafe 包提供的函数会提升代码的效率，Go 源码中也是大量使用 unsafe 包。&#xA;unsafe 包 //定义 type ArbitraryType int type Pointer *ArbitraryType //函数 func Sizeof(x AribitraryType) uintptr{} func Offsetof(x AribitraryType) uintptr{} func Alignof(x AribitraryType) uintptr{} 分析 Pointer : 指向任意类型，类似于 C 中的 void*。&#xA;Sizeof : 返回所传类型的大小，指针只返回指针的本身（x64 8byte x86 4byte），而不会返回所指向的内存大小。&#xA;Offsetof : 返回 struct 成员在内存中的位置，相对于此结构体的头位置，所传参数必须是结构体成员。传入指针，或者结构体本身，会 error&#xA;Alignof : 返回 M，M 是内存对齐时的倍数。&#xA;任意指针都可以和 unsafe.Pointer 相互转换。&#xA;uintptr 可以和 unsafe.</description>
    </item>
    <item>
      <title>Unity性能优化方案</title>
      <link>https://domyson.github.io/post/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      <description>音频 短音频使用Wav，长音频使用mp3 纹理 Mipmap mipmap用于减少渲染的带宽压力，但会有额外的内存开销，一般而言UI是建议关闭的，3D模型看情况开启&#xA;Read/Write 纹理尺寸 不同大小的纹理尺寸对内存的占用也是不同，依照项目的实际情况来决定Size&#xA;格式 由于ETC、PVRTC等格式均为有损压缩，因此，当纹理色差范围跨度较大时，均不可避免地造成不同程度的“阶梯”状的色阶问题。因此，很多研发团队使用RGBA32/ARGB32格式来实现更好的效果。但是，这种做法将造成很大的内存占用&#xA;ETC1 不支持透明通道问题 可以通过 RGB24 + Alpha8 + Shader 的方式达到比较好的效果&#xA;ECT2，ASTC 但需要设备支持 OpenGL ES3.0&#xA;LOD unity内置的一项技术，主要是根据目标离相机的距离来断定使用何种精度的模型，减少顶点数的绘制，但代价就是要牺牲部分内存&#xA;Occlusion culling 遮挡剔除 遮挡剔除是用来消除躲在其他物件后面看不到的物件，这代表资源不会浪费在计算那些看不到的顶点上，进而提升性能&#xA;batching dynamic batching 将一些足够小的网格，在CPU上转换它们的顶点，将许多相似的顶点组合在一起，并一次性绘制它们。 无论静态还是动态合批都要求使用相同的材质，动态合批有以下限制：&#xA;+ 如果GameObjects在Transform上包含镜像，则不会对其进行动态合批处理 + 使用多个pass的shader不会被动态合批处理 + 使用不同的Material实例会导致GameObjects不能一起批处理，即使它们基本相同。 + [官方25个不能动批的情况](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FUnity-Technologies%2FBatchBreakingCause) static batching 静态合批是将静态（不移动）GameObjects组合成大网格，然后进行绘制。静态合批使用比较简单，PlayerSettings中开启static batching，然后对需要静态合批物体的Static打钩即可，unity会自动合并被标记为static的对象，前提它们共享相同的材质，并且不移动，被标记为static的物体不能在游戏中移动，旋转或缩放。但是静态批处理需要额外的内存来存储合并的几何体。注意如果多个GameObject在静态批处理之前共享相同的几何体，则会在编辑器或运行时为每个GameObject创建几何体的副本，这会增大内存的开销&#xA;GPU Instancing 使用GPU Instancing可以一次渲染(render)相同网格的多个副本，仅使用少量DrawCalls。在渲染诸如建筑、树木、草等在场景中重复出现的事物时，GPU Instancing很有用。&#xA;每次draw call，GPU Instancing只渲染相同(identical )的网格，但是每个实例(instance)可以有不同的参数(例如，color或scale)，以增加变化(variation)，减少重复的出现。&#xA;GPU Instancing可以减少每个场景draw calls次数。这显著提升了渲染性能。&#xA;Physics Auto Simulation 根据项目实际需要是否开启物理模拟，默认是是开启的&#xA;Fixed Timestep 过小的值会操成计算量过大，过大的值可能造成部分机制异常(如卡墙，穿透等)，根据项目实际来确定&#xA;Maximum Allowed Timestep 这里我们需要先知道物理系统本身的特性，即当游戏上一帧卡顿时，Unity会在当前帧非常靠前的阶段连续调用N次FixedUpdate.PhysicsFixedUpdate，Maximum Allowed Timestep的意义就在于单帧限制物理更新的次数，</description>
    </item>
    <item>
      <title>预处理器</title>
      <link>https://domyson.github.io/post/language/c/preprocessor/</link>
      <pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/c/preprocessor/</guid>
      <description>预处理器 #pragma 用于指示编译器完成一些特定的动作&#xA;#pragma message usermessage&#xA;//example:test.c #include &amp;lt;stdio.h&amp;gt; #define IOS #if defined IOS #pragma message &amp;#34;ready complie ios...&amp;#34; #endif //complie output: note: #pragma message: ready complie ios... #pragma once 确保头文件仅被编译一次&#xA;//example:test.h #pragma once int value = 10; //example:test.c #include &amp;#34;test.h&amp;#34; #include &amp;#34;test.h&amp;#34; #pragma pack(size_t) 指定内存对齐&#xA;//example:test.c // 2byte 对齐 #pragma pack(2) struct foo{ char c1; char c2: short 2; int i; }; // 4byte 对齐 #pragma pack(4) struct bar{ char c1; shirt s; char c2; int i; }; void main(){ printf(&amp;#34;%d\n&amp;#34;,sizeof(struct foo)); //8 printf(&amp;#34;%d\n&amp;#34;,sizeof(struct bar)); //12 } 在不同编译器之间不可移植，在不同编译器可能以不同的方式解释，预处理器将忽略不被识别的此指令</description>
    </item>
    <item>
      <title>pointer</title>
      <link>https://domyson.github.io/post/language/c/pointer/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/c/pointer/</guid>
      <description></description>
    </item>
    <item>
      <title>Go 编译指示</title>
      <link>https://domyson.github.io/post/language/go/pragma/</link>
      <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/pragma/</guid>
      <description>编译指示 在计算机编程中，编译指示(pragma) 是一种语言结构，它指示编译器应该如何处理其输入。指示不是编程语言语法的一部分，因编译器而异。&#xA;Go中的编译指示 //go:pragma func Echo(){} 指示详解 //go:noinline 使函数不内联，内联是在编译期间发生的，将函数调用处替换为被调用函数主体的一种编译器优化手段。&#xA;减少函数调用的开销，提高执行速度。&#xA;复制后的更大函数体为其他编译优化带来可能性，如 过程间优化&#xA;消除分支，并改善空间局部性和指令顺序性，同样可以提高性能。&#xA;代码复制带来的空间增长。&#xA;如果有大量重复代码，反而会降低缓存命中率，尤其对 CPU 缓存是致命的。&#xA;内联 func Max(a, b int) int { if a &amp;gt; b { return a } return b } func F() { const a, b = 100, 20 if Max(a, b) == b { panic(b) } } // `Max` 函数被内联，死码消除之后，`F()` 函数被变成了 `F(){ return }` 内联级别：默认常规内联，-gcflags=-l 禁用内联，-gcflags=&#39;-l -l&#39; 二级内联，-gcflags=&#39;-l -l -l&#39; 三级内联，-gcflags=&#39;-l -l -l -l&#39; 四级内联，级数越大，也许更快，但bug更多</description>
    </item>
    <item>
      <title>TLS</title>
      <link>https://domyson.github.io/post/linux/tls/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/linux/tls/</guid>
      <description>简介 传输层安全性协议（Transport Layer Security），及其前身 SSL3.0 之后安全套接层（Secure Sockets Layer，缩写作SSL）是一种安全协议，目的是为互联网通信提供安全及数据完整性保障。SSL包含记录层（Record Layer）和传输层，记录层协议确定传输层数据的封装格式。传输层安全协议使用X.509认证，之后利用RSA 加密演算来对通信方做身份认证，之后交换对称密钥作为会谈密钥（Session key）。这个会谈密钥是用来将通信两方交换的数据做加密，保证两个应用间通信的保密性和可靠性，使客户与服务器应用之间的通信不被攻击者窃听。&#xA;作用 安全传输层协议（TLS）用于在两个通信应用程序之间提供保密性和数据完整性。&#xA;协议由两层组成： TLS 记录协议（TLS Record）和 TLS 握手协议（TLS Handshake）。&#xA;TLS协议的优势是与高层的应用层协议（如HTTP、FTP、Telnet等）无耦合。应用层协议能透明地运行在TLS协议之上，由TLS协议进行创建加密通道需要的协商和认证。应用层协议传送的数据在通过TLS协议时都会被加密，从而保证通信的私密性。&#xA;连接过程 当客户端连接到支持TLS协议的服务器要求创建安全连接并列出了受支持的密码组合（加密密码算法和加密哈希函数），握手开始。&#xA;服务器从该列表中决定加密和散列函数，并通知客户端。&#xA;服务器发回其数字证书，此证书通常包含服务器的名称、受信任的证书颁发机构（CA）和服务器的公钥。 客户端确认其颁发的证书的有效性。&#xA;为了生成会话密钥用于安全连接，客户端使用服务器的公钥加密随机生成的密钥，并将其发送到服务器，只有服务器才能使用自己的私钥解密。&#xA;利用随机数，双方生成用于加密和解密的对称密钥。这就是TLS协议的握手，握手完毕后的连接是安全的，直到连接（被）关闭。如果上述任何一个步骤失败，TLS握手过程就会失败，并且断开所有的连接。&#xA;TLS协议 https 本身基于 http 传输，但是信息通过了 tls 协议加密。&#xA;tls 协议位于传输层之上，应用层之下。首次进行 tls 1.3 协议传输需要一个 RTT&#xA;tls 可以使用对称加密和非对称加密。&#xA;握手过程 客户端发送一个随机值以及需要的协议和加密方式。&#xA;服务端收到客户端的随机值，自己也产生一个随机值，并根据客户端需求的协议和加密方式来使用对应的方式，并且发送自己的证书（如果需要验证客户端证书需要说明）。&#xA;客户端收到服务端的证书并验证是否有效，验证通过会再生成一个随机值，通过服务端证书的公钥去加密这个随机值并发送给服务端，如果服务端需要验证客户端证书的话会附带证书。&#xA;服务端收到加密过的随机值并使用私钥解密获得第三个随机值，这时候两端都拥有了三个随机值，可以通过这三个随机值按照之前约定的加密方式生成密钥，接下来的通信就可以通过该密钥来加密解密。&#xA;之后通过此非对称加密传输的对称加密的密钥来进行正式通讯。</description>
    </item>
    <item>
      <title>Go标准命令</title>
      <link>https://domyson.github.io/post/language/go/cmd/</link>
      <pubDate>Tue, 28 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/cmd/</guid>
      <description>&lt;p&gt;Go源码文件包括：命令源码文件、库源码文件和测试源码文件。其中，命令源码文件总应该属于main代码包，且在其中有无参数声明、无结果声明的main函数。单个命令源码文件可以被单独编译，也可以被单独安装&lt;/p&gt;</description>
    </item>
    <item>
      <title>channel</title>
      <link>https://domyson.github.io/post/language/go/channel/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/channel/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;CSP(communicating sequential processes)&lt;/code&gt; 模型由并发执行实体(进程，线程或协程)，和消息通道组成，实体之间通过消息通道发送消息进行通信。和 &lt;code&gt;Actor&lt;/code&gt; 模型不同，&lt;code&gt;CSP&lt;/code&gt; 模型关注的是消息发送的载体，即通道，而不是发送消息的执行实体。Go 语言的并发模型参考了 CSP 理论，其中执行实体对应的是 &lt;code&gt;goroutine，&lt;/code&gt; 消息通道对应的就是 &lt;code&gt;channel&lt;/code&gt;。&lt;code&gt;CSP&lt;/code&gt; 模型的核心是：不通过共享内存来达到通讯，而是通过通讯来共享内存。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;channel&lt;/code&gt; 提供了一种通信机制，通过它，一个 &lt;code&gt;goroutine&lt;/code&gt; 可以与另一 &lt;code&gt;goroutine&lt;/code&gt; 发送消息。&lt;code&gt;channel&lt;/code&gt; 本身还需关联了一个类型，也就是可以发送数据的类型。可以通过 &lt;code&gt;len()&lt;/code&gt; 获取通道当前缓冲数量。 &lt;code&gt;cap()&lt;/code&gt; 获取通道最大缓冲。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Go Module</title>
      <link>https://domyson.github.io/post/language/go/mod/</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/mod/</guid>
      <description>Module Golang 从1.11版本开始支持官方自带的依赖管理模块。根据项目路径中的 go.mod 文件来建立依赖管理。&#xA;依赖添加 通过 import 自动添加到 go.mod 文件中&#xA;import &amp;#34;github.com/xxx/yyy&amp;#34; 编辑 go.mod 文件&#xA;module xxx go 1.13.4 require( xxxx v0.0.0 yyyy v1.1.1 ) 依赖升级 通过 go 命令&#xA;#查看gin的所有版本 go list -m -versions github.com/gin-gonic/gin #输出所有gin的版本 github.com/gin-gonic/gin v1.1.1 v1.1.2 v1.1.3 v1.1.4 v1.3.0 v1.4.0 v1.5.0 #下载所需依赖 go mod tidy 直接编辑 go.mod 文件&#xA;删除未使用依赖项 go mod tidy&#xA;使用本地包 /* go.mod文件 replace boost-go v0.0.1 =&amp;gt; ../boost-go */ </description>
    </item>
    <item>
      <title>process</title>
      <link>https://domyson.github.io/post/linux/process/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/linux/process/</guid>
      <description>进程状态 TASK_RUNNING TASK_INTERRUPTIBLE TASK_UNINTERRUPTIBLE TASK_TRACED TASK_STOPPED </description>
    </item>
    <item>
      <title>Locker</title>
      <link>https://domyson.github.io/post/language/go/lock/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/lock/</guid>
      <description>sync.Mutex mutex相关的所有事情都是通过sync.Mutex类型的两个方法sync.Lock()和sync.Unlock()函数来完成的，前者用于获取sync.Mutex锁，后者用于释放sync.Mutex锁。sync.Mutex一旦被锁住，其它的Lock()操作就无法再获取它的锁，只有通过Unlock()释放锁之后才能通过Lock()继续获取锁。&#xA;不区分读写锁，只有Lock()与Lock()之间才会导致阻塞的情况&#xA;不与 Goroutine 关联&#xA;在Lock()和Unlock()之间的代码段称为资源的临界区(critical section)，在这一区间内的代码是严格被Lock()保护的，是线程安全的，任何一个时间点都只能有一个goroutine执行这段区间的代码。由于内核调度的不确定性，所以谁获取锁也是不确定的&#xA;sync.RWMutex RWMutex 基于 Mutex,并增加了读、写信号量，增加了获取读锁的计数&#xA;读锁和读锁兼容，写锁和读锁互斥，写锁和写锁互斥&#xA;可以同时申请多个读锁&#xA;读锁存在，则写锁阻塞，反之亦然&#xA;写锁存在，写锁和读锁都阻塞，同一时间仅一个能写&#xA;不与 Goroutine 关联&#xA;源码 //RwMutex source code type RWMutex struct{ w Mutex writerSem uint32 readerSem uint32 readerCount int32 readerWait int32 } //example var rw sync.RWMutex func Something(){ // Lock() UnLock() 获取和释放写锁 // RLock() RUnlock() 获取和释放读锁 } sync.Cond 条件锁 sync.Cond 实现了一个条件变量，在 Locker 的基础上增加了一个消息通知的功能，其内部维护了一个等待队列，队列中存放的是所有等待在这个 sync.Cond 的 goroutine，即保存了一个通知列表。可以用来唤醒一个或所有因等待条件变量而阻塞的 goroutine，以此来实现多个 Go 程间的同步。&#xA;源码 type Cond struct { noCopy noCopy L Locker // 基于原生的锁 notify notifyList //通知列表 checker copyChecker } // 基于一个锁来创建，可以是 RWMutex 或 Mutexs func NewCond(l Locker) *Cond { return &amp;amp;Cond{L: l} } // 挂起 goroutine 直到调用 Broadcast和Signal func (c *Cond) Wait() { c.</description>
    </item>
    <item>
      <title>Go性能分析</title>
      <link>https://domyson.github.io/post/language/go/pprof/</link>
      <pubDate>Fri, 23 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/pprof/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。对于单元测试中单元的含义，一般要根据实际情况去判定其具体含义，如 C语言中单元指一个函数,单元就是人为规定的最小的被测功能模块。单元测试是在软件开发过程中要进行的最低级别的测试活动，软件的独立单元将在与程序的其他部分相隔离的情况下进行测试。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Protobuf3</title>
      <link>https://domyson.github.io/post/protobuf/</link>
      <pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/protobuf/</guid>
      <description>&lt;h1 id=&#34;简介&#34;&gt;简介&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;Protocol Buffers&lt;/code&gt;，是Google公司开发的一种数据描述语言，类似于XML能够将结构化数据序列化，可用于数据存储、通信协议等方面。本文只介绍 &lt;code&gt;syntax = proto3&lt;/code&gt; 的协议语法。&lt;/p&gt;&#xA;&lt;h1 id=&#34;标准类型对照&#34;&gt;标准类型对照&lt;/h1&gt;&#xA;&lt;table&gt;&#xA;&lt;thead&gt;&#xA;&lt;tr&gt;&#xA;&lt;th style=&#34;text-align:center&#34;&gt;.proto&lt;/th&gt;&#xA;&lt;th style=&#34;text-align:center&#34;&gt;注释&lt;/th&gt;&#xA;&lt;th style=&#34;text-align:center&#34;&gt;C++&lt;/th&gt;&#xA;&lt;th style=&#34;text-align:center&#34;&gt;Python&lt;/th&gt;&#xA;&lt;th style=&#34;text-align:center&#34;&gt;Go&lt;/th&gt;&#xA;&lt;th style=&#34;text-align:center&#34;&gt;C#&lt;/th&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/thead&gt;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;double&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;定长编码&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;double&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;float&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;float64&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;double&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;float&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;定长编码&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;float&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;float&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;float32&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;float&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;int32&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;变长编码,负数编码效率低，可使用&lt;code&gt;sint32&lt;/code&gt;&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;int32&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;int&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;int32&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;int&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;int64&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;变长编码,负数编码效率低，可使用&lt;code&gt;sint64&lt;/code&gt;&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;int64&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;int/long&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;int64&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;long&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;uint32&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;变长编码&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;uint32&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;int/long&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;uint32&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;uint&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;uint64&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;变长编码&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;uint64&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;int/long&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;unit64&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;ulong&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;sint32&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;变长编码，对负数编码比&lt;code&gt;int32&lt;/code&gt;更有效率&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;int32&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;int&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;int32&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;int&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;sint64&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;变长编码，对负数编码比&lt;code&gt;int64&lt;/code&gt;更有效率&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;int64&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;int/long&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;int64&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;long&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;fixed32&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;总是&lt;code&gt;4&lt;/code&gt;字节，如果值大于&lt;code&gt;2^28&lt;/code&gt;比&lt;code&gt;uint32&lt;/code&gt;更有效率&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;uint32&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;int/long&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;uint64&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;ulong&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;fixed64&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;总是&lt;code&gt;8&lt;/code&gt;字节，如果值大于&lt;code&gt;2^56&lt;/code&gt;比&lt;code&gt;uint64&lt;/code&gt;更有效率&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;uint64&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;int/long&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;uint64&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;ulong&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;bool&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;1或0的变长编码&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;bool&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;boolean&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;bool&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;bool&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;必须是&lt;code&gt;UTF-8&lt;/code&gt;编码&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;str/unicode&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;bytes&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;可包含任意的字节顺序&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;str&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;[]byte&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;ByteString&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>Go协程的思考</title>
      <link>https://domyson.github.io/post/language/go/goroutine/</link>
      <pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/goroutine/</guid>
      <description>&lt;h1 id=&#34;栈&#34;&gt;栈&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;一个 os 线程会有一个给固定大小的内存块（一般是 2MB），用来存储当前线程中调用或挂起函数的内部变量，固定大小的栈对于复杂和深层次递归是不够的，而 Goroutine 会以一个很小的栈（2KB）开始其生命周期，这个栈会动态伸缩，最大能到达 1GB（32位系统是 250M）&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;调度方式&#34;&gt;调度方式&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;os 线程由操作系统内核调用，每过一定时间（毫秒），硬件计时器会中断处理器，并调用一个名为 scheduler 的内建函数，这个函数会挂起当前执行的线程并保存内存中它的寄存器内存，然后检查线程列表并决定下一次执行哪个线程，并从内存中恢复该线程的寄存器信息，恢复该线程的线程并执行，这就是上下文切换，增加了 CPU 的运行周期。而 Go 的 runtime 包含了自身的调度器，和 os 线程不同是，&lt;code&gt;Goroutine&lt;/code&gt; 属于用户级线程由语言支持，调度由语言支持，所有开销会减少很多（相比于内核上下文切换）。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Docker</title>
      <link>https://domyson.github.io/post/docker/</link>
      <pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/docker/</guid>
      <description>&lt;h1 id=&#34;什么是docker&#34;&gt;什么是docker&lt;/h1&gt;&#xA;&lt;p&gt;Docker 是一个开源的容器引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者和系统管理员在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括 VMs（虚拟机）、bare metal、OpenStack 集群、云端、数据中心和其他的基础应用平台。容器是完全使用沙箱机制，相互之间不会有任何接口。&lt;/p&gt;&#xA;&lt;h1 id=&#34;有什么优势&#34;&gt;有什么优势&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;轻量，在一台机器上运行的多个Docker容器可以共享这台机器的操作系统内核；它们能够迅速启动，只需占用很少的计算和内存资源。镜像是通过文件系统层进行构造的，并共享一些公共文件。这样就能尽量降低磁盘用量，并能更快地下载镜像。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;标准，Docker 容器基于开放式标准，能够在所有主流Linux版本、Microsoft Windows以及包括VM、裸机服务器和云在内的任何基础设施上运行。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安全，Docker 赋予应用的隔离性不仅限于彼此隔离，还独立于底层的基础设施。Docker默认提供最强的隔离，因此应用出现问题，也只是单个容器的问题，而不会波及到整台机器。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;一次发布，到处使用&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;docker和虚拟机&#34;&gt;Docker和虚拟机&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;容器和虚拟机具有相似的资源隔离和分配优势，但功能有所不同，因为容器虚拟化的是操作系统，而不是硬件，因此容器更容易移植，效率也更高。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;&lt;thead&gt;&#xA;&lt;tr&gt;&#xA;&lt;th style=&#34;text-align:center&#34;&gt;特性&lt;/th&gt;&#xA;&lt;th style=&#34;text-align:center&#34;&gt;容器&lt;/th&gt;&#xA;&lt;th style=&#34;text-align:center&#34;&gt;虚拟机&lt;/th&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/thead&gt;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;启动&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;秒级&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;分钟级&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;硬盘&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;MB&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;GB&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;性能&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;接近原生&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;弱于原生&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;支持量&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;单机上千&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;单机几十左右&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;容器是一个应用层抽象，用于将代码和依赖资源打包在一起。 多个容器可以在同一台机器上运行，共享操作系统内核，但各自作为独立的进程在用户空间中运行 。与虚拟机相比， 容器占用的空间较少（容器镜像大小通常只有几十兆），瞬间就能完成启动。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;虚拟机（VM）是一个物理硬件层抽象，用于将一台服务器变成多台服务器。 管理程序允许多个VM在一台机器上运行。每个VM都包含一整套操作系统、一个或多个应用、必要的二进制文件和库资源，因此占用大量空间。而且VM启动也十分缓慢 。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;虚拟机更擅长于彻底隔离整个运行环境。例如，云服务提供商通常采用虚拟机技术隔离不同的用户。而 Docker 通常用于隔离不同的应用 ，例如前端，后端以及数据库。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;docker基本组成&#34;&gt;Docker基本组成&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;镜像 （Image）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;容器（Container）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;仓库（Repository）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;镜像image-一个特殊的文件系统&#34;&gt;镜像（Image）—— 一个特殊的文件系统&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;操作系统分为内核和用户空间。对于Linux而言，内核启动后，会挂载root文件系统为其提供用户空间支持。而Docker镜像（Image），就相当于是一个root文件系统。Docker镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。 镜像不包含任何动态数据，其内容在构建之后也不会被改变。Docker设计时，就充分利用Union FS的技术，将其设计为分层存储的架构。 镜像实际是由多层文件系统联合组成。镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;容器container-镜像运行时的实体&#34;&gt;容器（Container）—— 镜像运行时的实体&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等 。容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。前面讲过镜像使用的是分层存储，容器也是如此。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。按照Docker最佳实践的要求，容器不应该向其存储层内写入任何数据 ，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此， 使用数据卷后，容器可以随意删除、重新run，数据却不会丢失。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;仓库repository-集中存放镜像文件的地方&#34;&gt;仓库（Repository）—— 集中存放镜像文件的地方&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;镜像构建完成后，可以很容易的在当前宿主上运行，但是， 如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry就是这样的服务。一个Docker Registry中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。所以说：镜像仓库是Docker用来集中存放镜像文件的地方类似于我们之前常用的代码仓库。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本 。我们可以通过&amp;lt;仓库名&amp;gt;:&amp;lt;标签&amp;gt;的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以latest作为默认标签。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;docker-registry公开服务和私有docker-registry&#34;&gt;Docker Registry公开服务和私有Docker Registry&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Docker Registry公开服务是开放给用户使用、允许用户管理镜像的Registry服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。最常使用的Registry公开服务是官方的Docker Hub ，这也是默认的Registry，并拥有大量的高质量的官方镜像，网址为：hub.docker.com/ 。在国内访问Docker Hub可能会比较慢国内也有一些云服务商提供类似于Docker Hub的公开服务。除了使用公开服务外，用户还可以在本地搭建私有Docker Registry 。Docker官方提供了Docker Registry镜像，可以直接使用做为私有Registry服务。开源的Docker Registry镜像只提供了Docker Registry API的服务端实现，足以支持Docker命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;image&#34;&gt;Image&lt;/h1&gt;&#xA;&lt;h2 id=&#34;查看拉取删除&#34;&gt;查看、拉取、删除&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;搜索镜像&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;docker search name[:tag]&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;拉取镜像,若不指定tag则默认拉取&lt;code&gt;latest&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;docker pull name[:tag]&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;查看本地所有镜像&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;docker images&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;删除镜像，可以多个删除&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;docker rmi [option] image ... &lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;-f&lt;/code&gt; 强制删除&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;制作推送&#34;&gt;制作、推送&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在指定路径中找到 &lt;a href=&#34;https://domyson.github.io/post/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt; 并构建Image, 后面是路径，但路径中必须存在 &lt;code&gt;Dockerfile&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;docker build -t [:namespace]/name:tag Path&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;给镜像赋予新的标签, &lt;code&gt;namespace&lt;/code&gt; 必须为 &lt;code&gt;dockerid&lt;/code&gt;，除非另外购买。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;docker tag oldname:oldtag  namespace/newname:newtag&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;将镜像上传至 docker 仓库 DockerHub 上,&lt;code&gt;namespace&lt;/code&gt; 必须是用户名,也可以上传至 &lt;code&gt;Gitlab&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;docker push namespace/name:tag&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;提交修改的镜像&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;docker commit [-a] [-m] CONTAINER [REPOSITORY[:TAG]]&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;-a&lt;/code&gt; 指明提交者&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;-m&lt;/code&gt; 提交信息&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像。以后我们运行这个新镜像的时候，就会拥有原有容器最后的文件变化。&#xA;此方式更新的镜像有依赖通过 &lt;code&gt;docker save -o dst [REPOSITORY[:TAG]]&lt;/code&gt;存盘,删除所有镜像,再通过 &lt;code&gt;docker load -i path&lt;/code&gt; 加载新镜像。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;container&#34;&gt;Container&lt;/h1&gt;&#xA;&lt;h2 id=&#34;查看容器&#34;&gt;查看容器&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;docker ps [-a|-s]&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;-a&lt;/code&gt; 查看所有容器。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;-s&lt;/code&gt; 查看已启动的容器。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;产看容器进程&#34;&gt;产看容器进程&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;docker top containerID&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;移除容器&#34;&gt;移除容器&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;可以多个同时删除&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;docker rm container ...  [option]&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;-f&lt;/code&gt; : 强制删除容器。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;-v&lt;/code&gt; : 若删除容器则数据卷也删除。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;停止容器&#34;&gt;停止容器&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;可以同时停止多个&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;docker stop container ...&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;启动容器&#34;&gt;启动容器&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;docker run [:--name] [:-e] [:-v] [:-h] [:--net] [:-p prot0:prot1] [:-d|-i] [:-t] [:--rm] [:--restart] [:--privileged=false] [:--ip] [:--network=] name:tag [:shell]&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;run&lt;/code&gt; 命令将会启动 &lt;code&gt;dockerfile&lt;/code&gt; 中定义的 &lt;code&gt;CMD&lt;/code&gt; 或 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 指令。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;--name=xxx&lt;/code&gt; 指定容器运行时的名称，可不选，默认为随机字符。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;-p Host0:Host1&lt;/code&gt; 表示本地 Host0 映射容器 Host1 端口,若为 &lt;code&gt;-P&lt;/code&gt; 则随机映射49000 ~ 49900 端口。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;-d&lt;/code&gt;：分离模式: 在后台运行。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;-h&lt;/code&gt;：指定主机域名。如 &lt;code&gt;-h domyson.cn&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;-e&lt;/code&gt;：为 &lt;code&gt;dockerfile&lt;/code&gt; 中的 &lt;code&gt;ENV&lt;/code&gt; 的参数变量,设置环境变量，或者覆盖已存在的环境变量 &lt;code&gt;-e TZ=&amp;quot;Asia/Shanghai&amp;quot;&lt;/code&gt; 设置时区为上海。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;-u&lt;/code&gt;：&lt;del&gt;指定执行用户，一般为 &lt;code&gt;root&lt;/code&gt;。&lt;/del&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;--rm&lt;/code&gt;：停止容器就移除。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;-it&lt;/code&gt;: 以交互模式运行容器 (不同于 &lt;code&gt;-d&lt;/code&gt; : 以分离模式运行容器),这意味着交互回话 session 结束时,容器就会停止运行，与 &lt;code&gt;-d&lt;/code&gt; 互斥。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;-v&lt;/code&gt; : 容器内创建一个数据卷。多次重复使用 -v 标记可以创建多个数据卷，也可以挂载一个主机目录作为数据卷 path0:path1(其中path0是主机目录，path1是容器目录)。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;--link container&lt;/code&gt; : &lt;del&gt;连接到其他容器。&lt;/del&gt; 这个方法以后将被弃用，推荐使用 &lt;code&gt;--network&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;--network NETWORK&lt;/code&gt;：指定连接到的网络。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;--ip&lt;/code&gt;：指定容器的ip。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;--restart&lt;/code&gt;：&lt;code&gt;no、on-failure:n、always&lt;/code&gt; 设置容器自动重启模式，若容器已经启动，可以通过 &lt;code&gt;docker update --restart args&lt;/code&gt; 来设置参数。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;--privileged&lt;/code&gt;：真正给予 &lt;code&gt;Container 中 root 用户&lt;/code&gt; root权限，否则 &lt;code&gt;root&lt;/code&gt; 只是一个普通用户。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;shell&lt;/code&gt;：指定交互的方式，一般为bash &lt;code&gt;bash -c &amp;quot;cmd string&amp;quot;&lt;/code&gt;，这条命令将由启动容器执行。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;查看容器日志&#34;&gt;查看容器日志&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;docker logs [opt] CONTAINER&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;-f&lt;/code&gt; : 跟踪日志输出&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;--since&lt;/code&gt; :显示某个开始时间的所有日志&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;-t&lt;/code&gt; : 显示时间戳&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;--tail N&lt;/code&gt; :仅列出最新N条容器日志&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;进入指定容器&#34;&gt;进入指定容器&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;docker exec [opt] CONTAINER shell [:args]&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;-d&lt;/code&gt; ：分离模式: 在后台运行&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;-it&lt;/code&gt;：以交互模式运行容器 (不同于 -d : 以分离模式运行容器),这意味着交互回话 session 结束时,容器就会停止运行。与 &lt;code&gt;-d&lt;/code&gt; 互斥&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;-u&lt;/code&gt;：指定运行用户,一般设置为 root&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;进入容器内部之后，通过 &lt;code&gt;exit&lt;/code&gt; 退出&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;容器通讯方式&#34;&gt;容器通讯方式&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://domyson.github.io/2020/01/Docker-Network/&#34;&gt;See DockerNetwork&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;镜像体积优化&#34;&gt;镜像体积优化&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt; 由多个 &lt;code&gt;Layers&lt;/code&gt; 组成（上限是127层）。而 &lt;a href=&#34;https://domyson.github.io/2019/03/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt; 每一条指令都会创建一层 &lt;code&gt;Layers&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;优化基础镜像&#34;&gt;优化基础镜像&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用 &lt;code&gt;Alpine&lt;/code&gt; 基础镜像&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Alpine是一个高度精简又包含了基本工具的轻量级Linux发行版，基础镜像仅 &lt;code&gt;4.41MB&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用 &lt;code&gt;scratch&lt;/code&gt; 基础镜像&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;scratch是一个空镜像，只能用于构建其他镜像&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用 &lt;code&gt;busybox&lt;/code&gt; 基础镜像&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;如果希望镜像里可以包含一些常用的Linux工具，busybox镜像是个不错选择，镜像本身只有1.16M，非常便于构建小镜像。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;串联-dockerfile-指令&#34;&gt;串联 &lt;code&gt;Dockerfile&lt;/code&gt; 指令&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;通过  &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 和 &lt;code&gt;\&lt;/code&gt; 将多个 &lt;code&gt;Run&lt;/code&gt; 命令合并成一个&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;多段构建&#34;&gt;多段构建&lt;/h2&gt;&#xA;&lt;p&gt;待完善&lt;/p&gt;&#xA;&lt;h2 id=&#34;heading&#34;&gt;&lt;/h2&gt;&#xA;&lt;h1 id=&#34;docker数据卷&#34;&gt;Docker数据卷&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据卷可以在容器之间共享和重用&lt;/li&gt;&#xA;&lt;li&gt;对数据卷的修改会立马生效&lt;/li&gt;&#xA;&lt;li&gt;对数据卷的更新，不会影响镜像&lt;/li&gt;&#xA;&lt;li&gt;数据卷默认会一直存在，即使容器被删除&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;创建数据卷&#34;&gt;创建数据卷&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;在 run 命令中 -v /data 标记来创建一个数据卷并挂载到容器里。在一次 run 中多次使用可以挂载多个数据卷。(创建一个容器，并加载一个数据卷到容器的 /data 目录)&#xA;&#xA;也可以在 Dockerfile 中使用  VOLUME  来添加一个或者多个新的卷到由该镜像创建的任意容器。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;删除数据卷&#34;&gt;删除数据卷&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;数据卷是被设计用来持久化数据的，它的生命周期独立于容器，Docker不会在容器被删除后自动删除数据卷，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的数据卷。如果需要在删除容器的同时移除数据卷。可以在删除容器的时候使用  docker rm -v  这个命令。无主的数据卷可能会占据很多空间，要清理会很麻烦。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;挂载一个主机目录作为数据卷&#34;&gt;挂载一个主机目录作为数据卷&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run -d -P --name web -v /src/webapp:/opt/webapp[:权限]&#xA;&#xA;上面的命令加载主机的  /src/webapp  目录到容器的  /opt/webapp  目录，默认权限是读写，也可以指定为只读(ro)&#xA;&#xA;--volumes-from 在run的时候指定数据卷容器&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;查看数据卷的信息&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;docker inspect contianerID&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;查看所有数据卷&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;docker volume ls&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;清除所有无主数据卷&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;docker volume prune&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;docker权限验证&#34;&gt;Docker权限验证&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;版本&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;docker version&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;登陆&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;docker login&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;登出&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;docker logout&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;docker远程访问&#34;&gt;Docker远程访问&lt;/h1&gt;&#xA;&lt;h1 id=&#34;docker-compose&#34;&gt;Docker-Compose&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;Docker-Compose&lt;/code&gt; （docker编排）是 docker 提供的一个命令行工具，用来定义和运行由多个容器组成的应用。可以通过 docker-compose.yml 文件声明式的定义应用程序的各个服务，并由单个命令完成应用的创建和启动。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;Docker-Compose&lt;/code&gt;将所管理的容器分为三层，分别是工程（project），服务（service）以及容器（container）。Docker-Compose运行目录下的所有文件（docker-compose.yml，extends文件或环境变量文件等）组成一个工程，若无特殊指定工程名即为当前目录名。一个工程当中可包含多个服务，每个服务中定义了容器运行的镜像，参数，依赖。一个服务当中可包括多个容器实例，Docker-Compose并没有解决负载均衡的问题，因此需要借助其它工具实现服务发现及负载均衡。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nginx</title>
      <link>https://domyson.github.io/post/nginx/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/nginx/</guid>
      <description>&lt;h1 id=&#34;简介&#34;&gt;简介&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Nginx功能丰富，可作为HTTP服务器，也可作为反向代理服务器，邮件服务器。支持FastCGI、SSL、Virtual Host、URL Rewrite、Gzip等功能。并且支持很多第三方的模块扩展。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://nginx.org/en/download.html&#34;&gt;Nginx下载&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;常用功能&#34;&gt;常用功能&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;负载均衡&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;反向代理&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;正向代理&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;文件服务器&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Markdown</title>
      <link>https://domyson.github.io/post/markdown/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/markdown/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://xianbai.me/learn-md/article/syntax/emphasis.html&#34;&gt;Link&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;markdown语法&#34;&gt;Markdown语法&lt;/h1&gt;&#xA;&lt;h1 id=&#34;目录&#34;&gt;目录&lt;/h1&gt;&#xA;&lt;p&gt;只能跳转标题，如果有同名标题与标题等级无关，匹配最优先的标题&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E4%B8%80%E3%80%81%E6%A0%87%E9%A2%98&#34;&gt;标题&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E4%BA%8C%E3%80%81%E5%AD%97%E4%BD%93&#34;&gt;字体&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E4%B8%89%E3%80%81%E5%BC%95%E7%94%A8&#34;&gt;引用&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E5%9B%9B%E3%80%81%E5%88%86%E5%89%B2%E7%BA%BF&#34;&gt;分割线&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E5%85%AD%E3%80%81%E8%B6%85%E9%93%BE%E6%8E%A5&#34;&gt;超链接&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E5%85%AB%E3%80%81%E8%A1%A8%E6%A0%BC&#34;&gt;表格&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E4%B9%9D%E3%80%81%E4%BB%A3%E7%A0%81&#34;&gt;代码&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E5%8D%81%E3%80%81%E6%B5%81%E7%A8%8B%E5%9B%BE&#34;&gt;流程图&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E5%8D%81%E4%B8%80%E3%80%81%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE&#34;&gt;语法高亮&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#%E5%8D%81%E4%BA%8C%E3%80%81%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6&#34;&gt;转义字符&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>I/O</title>
      <link>https://domyson.github.io/post/linux/io/</link>
      <pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/linux/io/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;数据的读取分为:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;等待数据准备&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;等待内核拷贝至用户空间&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;基本模型矩阵&lt;/p&gt;&#xA;&lt;table&gt;&#xA;&lt;thead&gt;&#xA;&lt;tr&gt;&#xA;&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;&#xA;&lt;th style=&#34;text-align:center&#34;&gt;阻塞&lt;/th&gt;&#xA;&lt;th style=&#34;text-align:center&#34;&gt;非阻塞&lt;/th&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/thead&gt;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;同步&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;Read/Write&lt;/code&gt;&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;Read\Write(O_NONBLOCK)&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;异步&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;I/O multiplexing(select/poll)&lt;/code&gt;&lt;/td&gt;&#xA;&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;AIO&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://domyson.github.io/post/linux/file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/linux/file/</guid>
      <description>Liunx 文件系统 对于 drwxr-xr-x 4 root root 4096 Nov 28 00:00 hook&#xA;文件类型 符号 描述 d 目录 l 符号链接 s 套接字文件 b 块设备文件 c 字符设备文件 p 命名管道文件 - 普通文件，不属于上述任意一种 权限更换 chmod [who] operator [permission] filename&#xA;who&#xA;符号 描述 u 文件属主权限 g 同组用户权限 o 其他用户权限 a 所有用户 operator&#xA;符号 描述 + 增加权限 - 取消权限 = 设定权限 permission&#xA;符号 描述 r 读权限 w 写权限 x 执行权限 </description>
    </item>
    <item>
      <title></title>
      <link>https://domyson.github.io/post/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/readme/</guid>
      <description>About me 👋 I love games, I love coding, and I&amp;rsquo;m interested in games, computer principles, and operating systems.&#xA;I often use go,c, csharp,lua to develop some frameworks and tools, and now I am working on arm and rust.&#xA;I developed the service framework skynet-go(based on cgo) and the game framework Anywhere(based on Unity3d).&#xA;I also developed an register base scripting language (scriptc).&#xA;Also wrote a new coding protocol (kproto) which is faster than protobuf-v3.</description>
    </item>
  </channel>
</rss>
