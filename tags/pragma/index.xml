<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pragma on 朝花夕拾</title>
    <link>https://domyson.github.io/tags/pragma/</link>
    <description>Recent content in Pragma on 朝花夕拾</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 05 Jul 2024 15:34:20 +0000</lastBuildDate>
    <atom:link href="https://domyson.github.io/tags/pragma/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go 编译指示</title>
      <link>https://domyson.github.io/post/language/go/pragma/</link>
      <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://domyson.github.io/post/language/go/pragma/</guid>
      <description>编译指示 在计算机编程中，编译指示(pragma) 是一种语言结构，它指示编译器应该如何处理其输入。指示不是编程语言语法的一部分，因编译器而异。&#xA;Go中的编译指示 //go:pragma func Echo(){} 指示详解 //go:noinline 使函数不内联，内联是在编译期间发生的，将函数调用处替换为被调用函数主体的一种编译器优化手段。&#xA;减少函数调用的开销，提高执行速度。&#xA;复制后的更大函数体为其他编译优化带来可能性，如 过程间优化&#xA;消除分支，并改善空间局部性和指令顺序性，同样可以提高性能。&#xA;代码复制带来的空间增长。&#xA;如果有大量重复代码，反而会降低缓存命中率，尤其对 CPU 缓存是致命的。&#xA;内联 func Max(a, b int) int { if a &amp;gt; b { return a } return b } func F() { const a, b = 100, 20 if Max(a, b) == b { panic(b) } } // `Max` 函数被内联，死码消除之后，`F()` 函数被变成了 `F(){ return }` 内联级别：默认常规内联，-gcflags=-l 禁用内联，-gcflags=&#39;-l -l&#39; 二级内联，-gcflags=&#39;-l -l -l&#39; 三级内联，-gcflags=&#39;-l -l -l -l&#39; 四级内联，级数越大，也许更快，但bug更多</description>
    </item>
  </channel>
</rss>
